/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-09-18 23:22:43.274158
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.151)*x2);
x13=((1.0)*x7);
x14=((0.151)*x4);
x15=((1.0)*x5);
x16=((0.05)*x4);
x17=((4.0e-7)*x4);
x18=((1.0)*x4);
x19=((0.05)*x2);
x20=((0.05)*x6);
x21=(x0*x3);
x22=(x11*x7);
x23=(x2*x3);
x24=(x1*x6);
x25=(x3*x6);
x26=(x0*x5);
x27=(x13*x6);
x28=((1.0)*x23);
x29=((1.0)*x1*x2);
x30=(x0*x1*x4);
x31=(x0*x1*x2);
x32=((1.0)*x2*x21);
x33=((((-1.0)*x1*x18))+x28);
x34=(((x18*x3))+x29);
x35=(((x21*x4))+x31);
x36=(((x2*x24))+((x25*x4)));
x37=((((-1.0)*x18*x24))+((x28*x6)));
x38=((((-1.0)*x0*x29))+(((-1.0)*x18*x21)));
x39=((((-1.0)*x2*x24))+(((-1.0)*x18*x25)));
x40=(x36*x7);
x41=(x39*x5);
x42=(x38*x5);
x43=((((-1.0)*x13*x35))+((x15*x6)));
x44=(((x11*x34))+((x10*x33*x7)));
x45=(((x10*x43))+((x11*(((((-1.0)*x0*x1*x18))+x32)))));
x46=((((-1.0)*x11*x37))+((x10*(((((1.0)*x13*x36))+(((1.0)*x0*x15)))))));
eerot[0]=(((x9*(((((-1.0)*x27))+x42))))+((x45*x8)));
eerot[1]=(((x8*((x27+(((-1.0)*x15*x38))))))+((x45*x9)));
eerot[2]=(((x11*x43))+((x10*(((((-1.0)*x32))+x30)))));
IkReal x47=((1.0)*x0*x1);
eetrans[0]=((((-7.2e-7)*x0*x1))+((x10*((((x19*x21))+(((-1.0)*x16*x47))))))+(((0.272)*x21))+((x11*(((((0.05)*x35*x7))+(((-1.0)*x20*x5))))))+((x17*x21))+(((4.0e-7)*x31))+((x12*x21))+(((-1.0)*x14*x47)));
eerot[3]=(((x46*x8))+((x9*(((((-1.0)*x0*x13))+(((-1.0)*x15*x39)))))));
eerot[4]=(((x46*x9))+((x8*((((x0*x7))+x41)))));
eerot[5]=(((x10*x37))+((x11*((x40+x26)))));
IkReal x48=((1.0)*x25);
eetrans[1]=((((7.2e-7)*x24))+((x14*x24))+((x11*(((((-0.05)*x26))+(((-0.05)*x40))))))+(((-0.272)*x25))+(((-4.0e-7)*x2*x24))+(((-1.0)*x17*x48))+(((-1.0)*x12*x48))+((x10*((((x16*x24))+(((-1.0)*x19*x48)))))));
eerot[6]=(((x33*x5*x9))+((x44*x8)));
eerot[7]=(((x44*x9))+((x5*x8*((((x1*x4))+(((-1.0)*x28)))))));
eerot[8]=((((-1.0)*x10*x34))+((x22*x33)));
eetrans[2]=((0.215)+(((-4.0e-7)*x23))+((x1*x12))+((x1*x17))+(((7.2e-7)*x3))+((x14*x3))+(((0.272)*x1))+((x10*((((x1*x19))+((x16*x3))))))+((x22*((((x1*x16))+(((-1.0)*x19*x3)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=((-1.0)*r02);
new_px=((((-0.05)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((0.05)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=((-1.0)*r22);
new_pz=((0.215)+(((-0.05)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.17823578106739)+(((12.1737436695679)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.17823578106739)+(((12.1737436695679)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x52=IKasin(((-1.17823578106739)+(((12.1737436695679)*pp))));
j2array[0]=((-1.57079103072945)+(((1.0)*x52)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.57080162286034)+(((-1.0)*x52)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((170062.522987584)+(((188819.418902685)*cj2))+sj2+(((52411.272527032)*(cj2*cj2)))+(((52411.272527032)*(sj2*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x53=((7.2e-7)+(((0.151)*sj2))+(((-4.0e-7)*cj2)));
IkReal x54=((0.272)+(((4.0e-7)*sj2))+(((0.151)*cj2)));
CheckValue<IkReal> x57 = IKatan2WithCheck(IkReal(x54),IkReal(x53),IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
IkReal x55=((1.0)*(x57.value));
if((((x54*x54)+(x53*x53))) < -0.00001)
continue;
CheckValue<IkReal> x58=IKPowWithIntegerCheck(IKabs(IKsqrt(((x54*x54)+(x53*x53)))),-1);
if(!x58.valid){
continue;
}
if( ((pz*(x58.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x58.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x56=IKasin((pz*(x58.value)));
j1array[0]=((((-1.0)*x55))+(((-1.0)*x56)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x56+(((-1.0)*x55)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x59=((1887500.0)*sj2);
IkReal x60=((5.0)*cj2);
IkReal x61=((12500000.0)*pz*sj1);
IkReal x62=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x62;
j0eval[1]=IKsign(x62);
j0eval[2]=((IKabs(((((9.0)*py))+(((-1.0)*py*x60))+((py*x61))+((py*x59)))))+(IKabs(((((-1.0)*px*x60))+((px*x59))+((px*x61))+(((9.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x63=((377500.0)*cj2);
IkReal x64=((1.0)*sj2);
IkReal x65=((2500000.0)*cj1*pz);
IkReal x66=(((pp*sj1))+(((-1.0)*sj1*(pz*pz))));
j0eval[0]=x66;
j0eval[1]=((IKabs(((((-1.0)*py*x65))+(((-1.0)*py*x64))+(((-1.0)*py*x63))+(((-680000.0)*py)))))+(IKabs(((((-1.0)*px*x64))+(((-1.0)*px*x65))+(((-1.0)*px*x63))+(((-680000.0)*px))))));
j0eval[2]=IKsign(x66);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x67=pz*pz;
IkReal x68=((1.44e-6)*cj1);
IkReal x69=((19531250000000.0)*pp);
IkReal x70=(py*pz);
IkReal x71=((28125000.0)*sj1);
IkReal x72=((10625000000000.0)*cj1);
IkReal x73=(px*pz);
IkReal x74=(pp*sj1);
IkReal x75=(sj1*x67);
j0eval[0]=(((cj1*x67))+(((-1.0)*cj1*pp))+(((-377777.777777778)*x75))+(((377777.777777778)*x74)));
j0eval[1]=((IKabs(((((-1.0)*px*x69))+(((-999667968757.0)*px))+(((-1.0)*x71*x73))+(((-1.0)*x72*x73)))))+(IKabs(((((-1.0)*x70*x72))+(((-1.0)*x70*x71))+(((-999667968757.0)*py))+(((-1.0)*py*x69))))));
j0eval[2]=IKsign((((x67*x68))+(((0.544)*x74))+(((-1.0)*pp*x68))+(((-0.544)*x75))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x76=pz*pz;
IkReal x77=((((-1.0)*pp))+x76);
IkReal x78=((((-377777.777777778)*x76))+(((377777.777777778)*pp)));
IkReal x80 = ((x77*x77)+(x78*x78));
if(IKabs(x80)==0){
continue;
}
IkReal x79=pow(x80,-0.5);
CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal(x77),IkReal(x78),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
IkReal gconst0=((-1.0)*(x81.value));
IkReal gconst1=((-1.0)*x77*x79);
IkReal gconst2=(x78*x79);
IkReal x82=pz*pz;
IkReal x83=j1;
CheckValue<IkReal> x86 = IKatan2WithCheck(IkReal(((((-1.0)*pp))+x82)),IkReal(((((-377777.777777778)*x82))+(((377777.777777778)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x86.valid){
continue;
}
IkReal x84=x86.value;
IkReal x85=x84;
if(((((j1*x85))+((j1*x83))+((x84*x85))+((x83*x84)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j1*x85))+((j1*x83))+((x84*x85))+((x83*x84)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x87=((0.151)*sj2);
IkReal x88=(gconst1*pz);
IkReal x89=((4.0e-7)*cj2);
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(((((-1.0)*py*x89))+(((7.2e-7)*py))+((py*x88))+((py*x87)))),IkReal(((((7.2e-7)*px))+((px*x88))+((px*x87))+(((-1.0)*px*x89)))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKsign((((gconst2*pp))+(((-1.0)*gconst2*(pz*pz))))),-1);
if(!x91.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x90.value)+(((1.5707963267949)*(x91.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x92=IKsin(j0);
IkReal x93=IKcos(j0);
IkReal x94=((1.44e-6)*gconst2);
IkReal x95=((0.544)*gconst1);
IkReal x96=(gconst1*pz);
IkReal x97=(gconst2*pz);
IkReal x98=(px*x93);
IkReal x99=(py*x92);
evalcond[0]=((((-1.0)*px*x92))+((py*x93)));
evalcond[1]=((0.272)+((gconst1*x99))+((gconst1*x98))+(((4.0e-7)*sj2))+(((0.151)*cj2))+x97);
evalcond[2]=((-7.2e-7)+(((-0.151)*sj2))+(((4.0e-7)*cj2))+(((-1.0)*x96))+((gconst2*x98))+((gconst2*x99)));
evalcond[3]=((((-4.86949746789546e-6)*gconst2*pp))+(((1.19129431243357e-6)*gconst2))+(((-0.0940863970563289)*gconst1))+(((-1.83823529413054)*gconst1*pp))+(((-1.0)*x99))+(((-1.0)*x98))+(((3.99705882358549e-7)*gconst1*sj2))+(((0.151000000002118)*gconst2*sj2)));
evalcond[4]=((-0.0511830000003584)+(((-1.0)*x95*x98))+(((-1.0)*x95*x99))+(((-1.44e-6)*x96))+(((-1.0)*pp))+(((-0.544)*x97))+((x94*x99))+((x94*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x682=pz*pz;
IkReal x683=((((-1.0)*pp))+x682);
IkReal x684=((((-377777.777777778)*x682))+(((377777.777777778)*pp)));
IkReal x686 = ((x683*x683)+(x684*x684));
if(IKabs(x686)==0){
continue;
}
IkReal x685=pow(x686,-0.5);
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal(x683),IkReal(x684),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x687.value))));
IkReal gconst4=((1.0)*x683*x685);
IkReal gconst5=((-1.0)*x684*x685);
IkReal x688=pz*pz;
IkReal x689=j1;
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(((((-1.0)*pp))+x688)),IkReal(((((-377777.777777778)*x688))+(((377777.777777778)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
IkReal x690=x692.value;
IkReal x691=x690;
if((((9.86960440108936)+((j1*x689))+((x690*x691))+((x689*x690))+(((-3.14159265358979)*x689))+(((-3.14159265358979)*j1))+(((-3.14159265358979)*x691))+(((-3.14159265358979)*x690))+((j1*x691)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j1*x689))+((x690*x691))+((x689*x690))+(((-3.14159265358979)*x689))+(((-3.14159265358979)*j1))+(((-3.14159265358979)*x691))+(((-3.14159265358979)*x690))+((j1*x691)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x693=(gconst4*pz);
IkReal x694=((0.151)*sj2);
IkReal x695=((4.0e-7)*cj2);
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*(pz*pz)))+((gconst5*pp)))),-1);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697 = IKatan2WithCheck(IkReal(((((7.2e-7)*py))+((py*x694))+((py*x693))+(((-1.0)*py*x695)))),IkReal(((((7.2e-7)*px))+(((-1.0)*px*x695))+((px*x694))+((px*x693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x697.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x696.value)))+(x697.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x698=IKsin(j0);
IkReal x699=IKcos(j0);
IkReal x700=((1.0)*px);
IkReal x701=(gconst4*pz);
IkReal x702=(gconst5*pz);
IkReal x703=(py*x698);
IkReal x704=(gconst5*x703);
IkReal x705=(gconst4*px*x699);
IkReal x706=(gconst5*px*x699);
evalcond[0]=(((py*x699))+(((-1.0)*x698*x700)));
evalcond[1]=((0.272)+(((4.0e-7)*sj2))+(((0.151)*cj2))+((gconst4*x703))+x702+x705);
evalcond[2]=((-7.2e-7)+(((-0.151)*sj2))+(((-1.0)*x701))+(((4.0e-7)*cj2))+x706+x704);
evalcond[3]=((((-1.83823529413054)*gconst4*pp))+(((-1.0)*x703))+(((0.151000000002118)*gconst5*sj2))+(((1.19129431243357e-6)*gconst5))+(((-0.0940863970563289)*gconst4))+(((3.99705882358549e-7)*gconst4*sj2))+(((-1.0)*x699*x700))+(((-4.86949746789546e-6)*gconst5*pp)));
evalcond[4]=((-0.0511830000003584)+(((-0.544)*x705))+(((-0.544)*x702))+(((-0.544)*gconst4*x703))+(((-1.44e-6)*x701))+(((-1.0)*pp))+(((1.44e-6)*x706))+(((1.44e-6)*x704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((IKabs(px))+(((0.5)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((((1678846.25917035)*(IKabs(py))))+(IKabs(((-1.0)+(((-126752.892569139)*sj2))+(((4.08756880400788)*pp))+(((-839423.129585173)*px))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((IKabs(py))+(((0.5)*(IKabs(((-35543.7500002489)+(((-377777.777777778)*pz))+(((-1.0)*px))+(((-694444.444444444)*pp))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x707=((694444.444444444)*pp);
IkReal x708=((377777.777777778)*pz);
IkReal x709=(x708+x707);
op[0]=((-35543.7500002489)+(((-1.0)*px))+(((-1.0)*x709)));
op[1]=((2.0)*py);
op[2]=((-35543.7500002489)+px+(((-1.0)*x709)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x710=((4.08756880400788)*pp);
IkReal x711=((839423.129585173)*px);
IkReal x712=((126752.892569139)*sj2);
IkReal x713=((-1.0)+x710);
op[0]=((((-1.0)*x711))+(((-1.0)*x712))+x713);
op[1]=((1678846.25917035)*py);
op[2]=((((-1.0)*x712))+x711+x713);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*py);
op[1]=((-2.0)*px);
op[2]=py;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=((IKabs(px))+(((0.5)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*py);
op[1]=((-2.0)*px);
op[2]=py;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((IKabs(px))+(((0.5)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((IKabs(((235389.072838139)+(((-1.0)*sj2))+(((-2501839.5878972)*px))+(((4598969.83072564)*pp)))))+(((5003679.17579441)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((IKabs(((-35543.7500002489)+(((-1.0)*pz))+(((-694444.444444444)*pp))+(((377777.777777778)*px)))))+(((755555.555555556)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x714=((694444.444444444)*pp);
IkReal x715=((1.0)*pz);
IkReal x716=((377777.777777778)*px);
IkReal x717=(x715+x714);
op[0]=((-35543.7500002489)+(((-1.0)*x717))+x716);
op[1]=((-755555.555555556)*py);
op[2]=((-35543.7500002489)+(((-1.0)*x716))+(((-1.0)*x717)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x718=((2501839.5878972)*px);
IkReal x719=((4598969.83072564)*pp);
IkReal x720=((1.0)*sj2);
IkReal x721=((235389.072838139)+x719);
op[0]=((((-1.0)*x720))+(((-1.0)*x718))+x721);
op[1]=((5003679.17579441)*py);
op[2]=((((-1.0)*x720))+x718+x721);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*py);
op[1]=((-2.0)*px);
op[2]=py;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((IKabs(px))+(((0.5)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*py);
op[1]=((-2.0)*px);
op[2]=py;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x722=((0.544)*sj1);
IkReal x723=((1.44e-6)*cj1);
IkReal x724=((1.0)*pp);
IkReal x725=((1.44e-6)*pz*sj1);
IkReal x726=((0.544)*cj1*pz);
CheckValue<IkReal> x727 = IKatan2WithCheck(IkReal(((((-0.0511830000003584)*py))+(((-1.0)*py*x724))+(((-1.0)*py*x725))+(((-1.0)*py*x726)))),IkReal(((((-0.0511830000003584)*px))+(((-1.0)*px*x726))+(((-1.0)*px*x725))+(((-1.0)*px*x724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x727.valid){
continue;
}
CheckValue<IkReal> x728=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x723))+(((pz*pz)*(((((-1.0)*x722))+x723))))+((pp*x722)))),-1);
if(!x728.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x727.value)+(((1.5707963267949)*(x728.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x729=IKcos(j0);
IkReal x730=IKsin(j0);
IkReal x731=((1.44e-6)*cj1);
IkReal x732=((0.544)*sj1);
IkReal x733=((4.0e-7)*sj2);
IkReal x734=((0.151)*sj2);
IkReal x735=((0.151)*cj2);
IkReal x736=(pz*sj1);
IkReal x737=((4.0e-7)*cj2);
IkReal x738=(cj1*pz);
IkReal x739=(px*x729);
IkReal x740=(py*x730);
evalcond[0]=(((py*x729))+(((-1.0)*px*x730)));
evalcond[1]=((0.272)+((sj1*x740))+x735+x733+x738+((sj1*x739)));
evalcond[2]=((-7.2e-7)+((cj1*x740))+(((-1.0)*x736))+(((-1.0)*x734))+x737+((cj1*x739)));
evalcond[3]=((((-1.0)*x739))+(((-1.0)*cj1*x737))+(((7.2e-7)*cj1))+(((-0.272)*sj1))+(((-1.0)*x740))+(((-1.0)*sj1*x733))+(((-1.0)*sj1*x735))+((cj1*x734)));
evalcond[4]=((-0.0511830000003584)+((x731*x739))+(((-1.0)*x732*x739))+(((-0.544)*x738))+((x731*x740))+(((-1.0)*x732*x740))+(((-1.44e-6)*x736))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x741=((0.151)*cj2);
IkReal x742=((4.0e-7)*sj2);
IkReal x743=((1.0)*cj1*pz);
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(((((-0.272)*py))+(((-1.0)*py*x742))+(((-1.0)*py*x741))+(((-1.0)*py*x743)))),IkReal(((((-1.0)*px*x743))+(((-1.0)*px*x741))+(((-1.0)*px*x742))+(((-0.272)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745=IKPowWithIntegerCheck(IKsign((((pp*sj1))+(((-1.0)*sj1*(pz*pz))))),-1);
if(!x745.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x744.value)+(((1.5707963267949)*(x745.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x746=IKcos(j0);
IkReal x747=IKsin(j0);
IkReal x748=((1.44e-6)*cj1);
IkReal x749=((0.544)*sj1);
IkReal x750=((4.0e-7)*sj2);
IkReal x751=((0.151)*sj2);
IkReal x752=((0.151)*cj2);
IkReal x753=(pz*sj1);
IkReal x754=((4.0e-7)*cj2);
IkReal x755=(cj1*pz);
IkReal x756=(px*x746);
IkReal x757=(py*x747);
evalcond[0]=(((py*x746))+(((-1.0)*px*x747)));
evalcond[1]=((0.272)+((sj1*x756))+((sj1*x757))+x755+x750+x752);
evalcond[2]=((-7.2e-7)+((cj1*x756))+((cj1*x757))+(((-1.0)*x753))+x754+(((-1.0)*x751)));
evalcond[3]=((((-1.0)*sj1*x752))+(((-1.0)*sj1*x750))+((cj1*x751))+(((7.2e-7)*cj1))+(((-0.272)*sj1))+(((-1.0)*x756))+(((-1.0)*x757))+(((-1.0)*cj1*x754)));
evalcond[4]=((-0.0511830000003584)+(((-0.544)*x755))+(((-1.0)*pp))+(((-1.0)*x749*x756))+(((-1.0)*x749*x757))+((x748*x757))+((x748*x756))+(((-1.44e-6)*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x758=(pz*sj1);
IkReal x759=((0.151)*sj2);
IkReal x760=((4.0e-7)*cj2);
CheckValue<IkReal> x761=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x761.valid){
continue;
}
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(((((-1.0)*py*x760))+((py*x758))+((py*x759))+(((7.2e-7)*py)))),IkReal((((px*x758))+((px*x759))+(((-1.0)*px*x760))+(((7.2e-7)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x761.value)))+(x762.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x763=IKcos(j0);
IkReal x764=IKsin(j0);
IkReal x765=((1.44e-6)*cj1);
IkReal x766=((0.544)*sj1);
IkReal x767=((4.0e-7)*sj2);
IkReal x768=((0.151)*sj2);
IkReal x769=((0.151)*cj2);
IkReal x770=(pz*sj1);
IkReal x771=((4.0e-7)*cj2);
IkReal x772=(cj1*pz);
IkReal x773=(px*x763);
IkReal x774=(py*x764);
evalcond[0]=((((-1.0)*px*x764))+((py*x763)));
evalcond[1]=((0.272)+((sj1*x774))+((sj1*x773))+x772+x769+x767);
evalcond[2]=((-7.2e-7)+((cj1*x773))+((cj1*x774))+(((-1.0)*x768))+x771+(((-1.0)*x770)));
evalcond[3]=((((-1.0)*sj1*x767))+(((-1.0)*sj1*x769))+((cj1*x768))+(((7.2e-7)*cj1))+(((-0.272)*sj1))+(((-1.0)*x773))+(((-1.0)*x774))+(((-1.0)*cj1*x771)));
evalcond[4]=((-0.0511830000003584)+(((-1.44e-6)*x770))+(((-1.0)*pp))+(((-0.544)*x772))+(((-1.0)*x766*x773))+(((-1.0)*x766*x774))+((x765*x773))+((x765*x774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
IkReal x775=x776.value;
j0array[0]=((-1.0)*x775);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x775)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x777=cj2*cj2;
IkReal x778=(py*sj0);
IkReal x779=((377500.0)*cj2);
IkReal x780=(cj0*px);
IkReal x781=(pz*sj2);
IkReal x782=((0.151)*cj2);
IkReal x783=(cj2*sj2);
IkReal x784=((1.0)*pz);
IkReal x785=(cj2*pz);
IkReal x786=(sj2*x780);
j1eval[0]=((((-1.8)*pz))+(((-377500.0)*x781))+((x779*x780))+((x778*x779))+((sj2*x778))+x786+x785+(((680000.0)*x778))+(((680000.0)*x780)));
j1eval[1]=IKsign(((((-0.151)*x781))+(((4.0e-7)*sj2*x778))+((x778*x782))+(((0.272)*x778))+(((-7.2e-7)*pz))+((x780*x782))+(((0.272)*x780))+(((4.0e-7)*x786))+(((4.0e-7)*x785))));
j1eval[2]=((IKabs(((2.5624e-7)+(((-8.0e-11)*cj2))+(((-1.208e-7)*x777))+(((0.02280099999984)*x783))+(((0.041072000000288)*sj2))+(((-1.0)*x780*x784))+(((-1.0)*x778*x784)))))+(IKabs(((-0.07398400000016)+(((-1.208e-7)*x783))+(((-0.082144)*cj2))+(((-2.176e-7)*sj2))+(pz*pz)+(((-0.02280099999984)*x777))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x787=cj2*cj2;
IkReal x788=(pz*sj2);
IkReal x789=(cj0*px);
IkReal x790=((377500.0)*sj2);
IkReal x791=(py*sj0);
IkReal x792=((1.0)*cj2);
IkReal x793=(cj2*pz);
IkReal x794=((0.151)*sj2);
IkReal x795=(cj2*sj2);
IkReal x796=((1.0)*pz);
IkReal x797=((4.0e-7)*cj2);
j1eval[0]=((((377500.0)*x793))+((x790*x791))+(((680000.0)*pz))+(((-1.0)*x791*x792))+(((-1.0)*x789*x792))+x788+(((1.8)*x789))+(((1.8)*x791))+((x789*x790)));
j1eval[1]=((IKabs(((-2.5624e-7)+(((1.208e-7)*x787))+(((-0.041072000000288)*sj2))+(((-1.0)*x791*x796))+(((8.0e-11)*cj2))+(((-1.0)*x789*x796))+(((-0.02280099999984)*x795)))))+(IKabs(((0.0228010000005184)+(((-0.02280099999984)*x787))+(((-1.208e-7)*x795))+(((-5.76e-13)*cj2))+(((2.1744e-7)*sj2))+(((-1.0)*pz*x796))))));
j1eval[2]=IKsign(((((0.151)*x793))+(((7.2e-7)*x791))+(((7.2e-7)*x789))+(((-1.0)*x791*x797))+(((0.272)*pz))+(((-1.0)*x789*x797))+((x791*x794))+((x789*x794))+(((4.0e-7)*x788))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x798=cj0*cj0;
IkReal x799=py*py;
IkReal x800=((pz*pz)+(((-1.0)*x798*x799))+((x798*(px*px)))+x799+(((2.0)*cj0*px*py*sj0)));
j1eval[0]=x800;
j1eval[1]=IKsign(x800);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x801=cj0*cj0;
IkReal x802=py*py;
IkReal x803=((4.0e-7)*sj2);
IkReal x804=(cj0*px);
IkReal x805=(py*sj0);
IkReal x806=((0.151)*pz);
IkReal x807=((0.151)*cj2);
IkReal x808=((0.151)*sj2);
IkReal x809=((4.0e-7)*cj2);
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal(((((-1.0)*x804*x807))+(((-1.0)*x805*x807))+(((-0.272)*x805))+(((-0.272)*x804))+(((-1.0)*sj2*x806))+(((-7.2e-7)*pz))+(((-1.0)*x803*x805))+(((-1.0)*x803*x804))+((pz*x809)))),IkReal((((x804*x808))+(((-1.0)*x804*x809))+(((-1.0)*x805*x809))+(((-0.272)*pz))+((x805*x808))+(((-1.0)*cj2*x806))+(((7.2e-7)*x804))+(((7.2e-7)*x805))+(((-1.0)*pz*x803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
CheckValue<IkReal> x811=IKPowWithIntegerCheck(IKsign(((((-1.0)*x801*x802))+(((2.0)*x804*x805))+(pz*pz)+((x801*(px*px)))+x802)),-1);
if(!x811.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x810.value)+(((1.5707963267949)*(x811.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x812=IKsin(j1);
IkReal x813=IKcos(j1);
IkReal x814=((0.151)*cj2);
IkReal x815=((4.0e-7)*cj2);
IkReal x816=(py*sj0);
IkReal x817=((0.151)*sj2);
IkReal x818=(cj0*px);
IkReal x819=((4.0e-7)*sj2);
IkReal x820=((1.44e-6)*x813);
IkReal x821=((0.544)*x812);
IkReal x822=(pz*x813);
IkReal x823=(pz*x812);
evalcond[0]=((0.272)+((x812*x818))+((x812*x816))+x819+x814+x822);
evalcond[1]=((-7.2e-7)+(((-1.0)*x817))+((x813*x818))+((x813*x816))+(((-1.0)*x823))+x815);
evalcond[2]=((((-1.0)*x812*x815))+((x812*x817))+(((7.2e-7)*x812))+((x813*x819))+((x813*x814))+pz+(((0.272)*x813)));
evalcond[3]=((((-1.0)*x812*x814))+(((-1.0)*x812*x819))+(((7.2e-7)*x813))+((x813*x817))+(((-1.0)*x818))+(((-1.0)*x816))+(((-1.0)*x813*x815))+(((-0.272)*x812)));
evalcond[4]=((-0.0511830000003584)+(((-1.0)*x816*x821))+(((-1.0)*x818*x821))+((x816*x820))+(((-1.0)*pp))+(((-1.44e-6)*x823))+((x818*x820))+(((-0.544)*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x824=cj2*cj2;
IkReal x825=(py*sj0);
IkReal x826=(cj2*sj2);
IkReal x827=(cj0*px);
IkReal x828=((1.0)*pz);
IkReal x829=((0.151)*sj2);
IkReal x830=((4.0e-7)*cj2);
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(((-2.5624e-7)+(((1.208e-7)*x824))+(((-0.041072000000288)*sj2))+(((-1.0)*x827*x828))+(((8.0e-11)*cj2))+(((-0.02280099999984)*x826))+(((-1.0)*x825*x828)))),IkReal(((0.0228010000005184)+(((-1.208e-7)*x826))+(((-1.0)*pz*x828))+(((-5.76e-13)*cj2))+(((2.1744e-7)*sj2))+(((-0.02280099999984)*x824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
CheckValue<IkReal> x832=IKPowWithIntegerCheck(IKsign(((((-1.0)*x827*x830))+((x825*x829))+(((7.2e-7)*x825))+(((7.2e-7)*x827))+(((0.272)*pz))+(((-1.0)*x825*x830))+(((0.151)*cj2*pz))+((x827*x829))+(((4.0e-7)*pz*sj2)))),-1);
if(!x832.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x831.value)+(((1.5707963267949)*(x832.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x833=IKsin(j1);
IkReal x834=IKcos(j1);
IkReal x835=((0.151)*cj2);
IkReal x836=((4.0e-7)*cj2);
IkReal x837=(py*sj0);
IkReal x838=((0.151)*sj2);
IkReal x839=(cj0*px);
IkReal x840=((4.0e-7)*sj2);
IkReal x841=((1.44e-6)*x834);
IkReal x842=((0.544)*x833);
IkReal x843=(pz*x834);
IkReal x844=(pz*x833);
evalcond[0]=((0.272)+((x833*x837))+((x833*x839))+x835+x840+x843);
evalcond[1]=((-7.2e-7)+(((-1.0)*x838))+((x834*x839))+((x834*x837))+(((-1.0)*x844))+x836);
evalcond[2]=((((0.272)*x834))+(((-1.0)*x833*x836))+((x833*x838))+pz+((x834*x840))+((x834*x835))+(((7.2e-7)*x833)));
evalcond[3]=((((-1.0)*x833*x840))+(((-1.0)*x833*x835))+(((-0.272)*x833))+(((-1.0)*x834*x836))+((x834*x838))+(((-1.0)*x837))+(((-1.0)*x839))+(((7.2e-7)*x834)));
evalcond[4]=((-0.0511830000003584)+(((-1.44e-6)*x844))+((x839*x841))+((x837*x841))+(((-1.0)*x837*x842))+(((-1.0)*pp))+(((-1.0)*x839*x842))+(((-0.544)*x843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x845=cj2*cj2;
IkReal x846=(cj0*px);
IkReal x847=((4.0e-7)*sj2);
IkReal x848=((0.151)*cj2);
IkReal x849=(py*sj0);
IkReal x850=(cj2*sj2);
IkReal x851=((1.0)*pz);
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(((-0.07398400000016)+(((-0.082144)*cj2))+(((-1.208e-7)*x850))+(((-2.176e-7)*sj2))+(pz*pz)+(((-0.02280099999984)*x845)))),IkReal(((2.5624e-7)+(((-8.0e-11)*cj2))+(((-1.0)*x846*x851))+(((-1.0)*x849*x851))+(((0.041072000000288)*sj2))+(((0.02280099999984)*x850))+(((-1.208e-7)*x845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853=IKPowWithIntegerCheck(IKsign(((((0.272)*x849))+(((0.272)*x846))+((x846*x848))+((x846*x847))+((x848*x849))+(((-7.2e-7)*pz))+(((-0.151)*pz*sj2))+((x847*x849))+(((4.0e-7)*cj2*pz)))),-1);
if(!x853.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x852.value)+(((1.5707963267949)*(x853.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x854=IKsin(j1);
IkReal x855=IKcos(j1);
IkReal x856=((0.151)*cj2);
IkReal x857=((4.0e-7)*cj2);
IkReal x858=(py*sj0);
IkReal x859=((0.151)*sj2);
IkReal x860=(cj0*px);
IkReal x861=((4.0e-7)*sj2);
IkReal x862=((1.44e-6)*x855);
IkReal x863=((0.544)*x854);
IkReal x864=(pz*x855);
IkReal x865=(pz*x854);
evalcond[0]=((0.272)+((x854*x858))+x856+x864+x861+((x854*x860)));
evalcond[1]=((-7.2e-7)+(((-1.0)*x859))+((x855*x858))+(((-1.0)*x865))+((x855*x860))+x857);
evalcond[2]=((((7.2e-7)*x854))+((x855*x856))+((x855*x861))+(((0.272)*x855))+pz+((x854*x859))+(((-1.0)*x854*x857)));
evalcond[3]=((((-1.0)*x854*x861))+(((7.2e-7)*x855))+((x855*x859))+(((-1.0)*x858))+(((-1.0)*x860))+(((-1.0)*x855*x857))+(((-1.0)*x854*x856))+(((-0.272)*x854)));
evalcond[4]=((-0.0511830000003584)+(((-1.0)*x860*x863))+(((-1.0)*pp))+((x858*x862))+(((-0.544)*x864))+(((-1.0)*x858*x863))+((x860*x862))+(((-1.44e-6)*x865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x100=((1.0)*cj0);
IkReal x101=(sj1*sj2);
IkReal x102=((1.0)*cj2);
IkReal x103=(r10*sj0);
IkReal x104=(r12*sj0);
IkReal x105=(r11*sj0);
IkReal x106=(x101+((cj1*cj2)));
IkReal x107=(((cj1*sj2))+(((-1.0)*sj1*x102)));
IkReal x108=(cj0*x106);
IkReal x109=(cj0*x107);
IkReal x110=(sj0*x107);
IkReal x111=((((-1.0)*cj1*x102))+(((-1.0)*x101)));
new_r00=(((r20*x107))+((x103*x106))+((r00*x108)));
new_r01=(((r21*x107))+((r01*x108))+((x105*x106)));
new_r02=(((r02*x108))+((r22*x107))+((x104*x106)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x100)));
new_r11=((((-1.0)*r11*x100))+((r01*sj0)));
new_r12=((((-1.0)*r12*x100))+((r02*sj0)));
new_r20=(((x103*x107))+((r20*x111))+((r00*x109)));
new_r21=(((r21*x111))+((r01*x109))+((x105*x107)));
new_r22=(((r02*x109))+((r22*x111))+((x104*x107)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-1.0)*new_r22);
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r02;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x112=new_r22*new_r22;
IkReal x113=((16.0)*new_r10);
IkReal x114=((16.0)*new_r01);
IkReal x115=((16.0)*new_r00);
IkReal x116=(new_r11*new_r22);
IkReal x117=((8.0)*new_r00);
IkReal x118=(x112*x113);
IkReal x119=(x112*x114);
j3eval[0]=((IKabs(((((-1.0)*x118))+x113)))+(IKabs((((new_r22*x117))+(((-8.0)*new_r11)))))+(IKabs(((((32.0)*new_r00))+(((-1.0)*x112*x115))+(((-16.0)*x116)))))+(IKabs(((((-1.0)*x113))+x118)))+(IKabs((((x112*x117))+(((-8.0)*x116)))))+(IKabs(((((-1.0)*x119))+x114)))+(IKabs(((((-1.0)*x114))+x119)))+(IKabs((((new_r22*x115))+(((16.0)*new_r11))+(((-32.0)*new_r11*x112))))));
if( IKabs(j3eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j5]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j3evalpoly[1];
IkReal x120=new_r22*new_r22;
IkReal x121=((16.0)*new_r01);
IkReal x122=(new_r00*new_r22);
IkReal x123=(x120*x121);
IkReal x124=((((8.0)*x122))+(((-8.0)*new_r11)));
op[0]=x124;
op[1]=((((-1.0)*x121))+x123);
op[2]=((((16.0)*x122))+(((-32.0)*new_r11*x120))+(((16.0)*new_r11)));
op[3]=((((-1.0)*x123))+x121);
op[4]=x124;
polyroots4(op,zeror,numroots);
IkReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[4]={true,true,true,true};
_nj3 = 4;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

IkReal x125=new_r22*new_r22;
IkReal x126=((16.0)*new_r10);
IkReal x127=(new_r11*new_r22);
IkReal x128=((8.0)*x127);
IkReal x129=(new_r00*x125);
IkReal x130=(x125*x126);
IkReal x131=((8.0)*x129);
j3evalpoly[0]=((((htj3*htj3)*(((((32.0)*new_r00))+(((-16.0)*x129))+(((-16.0)*x127))))))+((htj3*(((((-1.0)*x126))+x130))))+(((htj3*htj3*htj3)*((x126+(((-1.0)*x130))))))+(((-1.0)*x128))+x131+(((htj3*htj3*htj3*htj3)*(((((-1.0)*x128))+x131)))));
if( IKabs(j3evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x132=cj3*cj3;
IkReal x133=((1.0)*new_r10);
IkReal x134=(cj3*new_r22);
IkReal x135=((1.0)+((x132*(new_r22*new_r22)))+(((-1.0)*x132)));
j5eval[0]=x135;
j5eval[1]=((IKabs((((new_r11*sj3))+(((-1.0)*x133*x134)))))+(IKabs(((((-1.0)*sj3*x133))+(((-1.0)*new_r11*x134))))));
j5eval[2]=IKsign(x135);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=cj3;
j5eval[1]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x136=IKsin(j5);
IkReal x137=IKcos(j5);
IkReal x138=((1.0)*new_r22);
evalcond[0]=(x137+new_r10);
evalcond[1]=((((-1.0)*x136))+new_r11);
evalcond[2]=((((-1.0)*x136*x138))+new_r00);
evalcond[3]=((((-1.0)*x137*x138))+new_r01);
evalcond[4]=((((-1.0)*new_r00*x138))+x136);
evalcond[5]=((((-1.0)*new_r01*x138))+x137);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00*new_r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*new_r22))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00*new_r22), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x139=IKcos(j5);
IkReal x140=IKsin(j5);
evalcond[0]=(x139+(((-1.0)*new_r10)));
evalcond[1]=(((new_r22*x140))+new_r00);
evalcond[2]=(((new_r22*x139))+new_r01);
evalcond[3]=(((new_r00*new_r22))+x140);
evalcond[4]=(((new_r01*new_r22))+x139);
evalcond[5]=((((-1.0)*x140))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x141=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x141.valid){
continue;
}
if((((-1.0)*(x141.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*(x141.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x142=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
if( IKabs((((new_r11*x142))+((gconst13*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst13*new_r00))+(((-1.0)*new_r10*x142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*x142))+((gconst13*new_r01))))+IKsqr(((((-1.0)*gconst13*new_r00))+(((-1.0)*new_r10*x142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((new_r11*x142))+((gconst13*new_r01))), ((((-1.0)*gconst13*new_r00))+(((-1.0)*new_r10*x142))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x143=IKsin(j5);
IkReal x144=IKcos(j5);
IkReal x145=(gconst13*new_r10);
IkReal x146=((1.0)*new_r00);
IkReal x147=(gconst13*new_r11);
IkReal x148=(new_r22*x144);
IkReal x149=((1.0)*x143);
IkReal x150=(new_r22*x143);
IkReal x151=x142;
IkReal x152=(new_r22*x151);
IkReal x153=((1.0)*x151);
evalcond[0]=(((new_r10*x151))+x144+((gconst13*new_r00)));
evalcond[1]=((((-1.0)*x149))+((new_r11*x151))+((gconst13*new_r01)));
evalcond[2]=(((gconst13*x150))+((x144*x151))+new_r10);
evalcond[3]=(x150+x145+(((-1.0)*x146*x151)));
evalcond[4]=(x147+x148+(((-1.0)*new_r01*x153)));
evalcond[5]=(x143+((new_r22*x145))+(((-1.0)*x146*x152)));
evalcond[6]=((((-1.0)*new_r01*x152))+x144+((new_r22*x147)));
evalcond[7]=(new_r00+(((-1.0)*x149*x152))+((gconst13*x144)));
evalcond[8]=(new_r11+(((-1.0)*x149*x151))+((gconst13*x148)));
evalcond[9]=((((-1.0)*x148*x153))+(((-1.0)*gconst13*x149))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x154=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x154.valid){
continue;
}
if((((-1.0)*(x154.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*(x154.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj3+(((-1.0)*gconst13)))))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))));
cj3=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst13)));
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x155.valid){
continue;
}
if((((-1.0)*(x155.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*(x155.value)))));
CheckValue<IkReal> x156=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x156.valid){
continue;
}
j5eval[0]=((1.0)+(x156.value));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))));
cj3=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst13)));
CheckValue<IkReal> x157=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x157.valid){
continue;
}
if((((-1.0)*(x157.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*(x157.value)))));
j5eval[0]=new_r22;
CheckValue<IkReal> x158=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x158.valid){
continue;
}
j5eval[1]=((1.0)+(x158.value));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))));
cj3=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst13)));
CheckValue<IkReal> x159=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x159.valid){
continue;
}
if((((-1.0)*(x159.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*(x159.value)))));
IkReal x160=new_r22*new_r22;
CheckValue<IkReal> x165=IKPowWithIntegerCheck(((-1.0)+x160),-1);
if(!x165.valid){
continue;
}
IkReal x161=x165.value;
if((((1.0)+x161)) < -0.00001)
continue;
IkReal x162=IKsqrt(((1.0)+x161));
if((((-1.0)*x161)) < -0.00001)
continue;
IkReal x163=IKsqrt(((-1.0)*x161));
IkReal x164=(x162*x163);
j5eval[0]=((((-1.0)*x162))+((x160*x162)));
j5eval[1]=(x164+(((-1.0)*x160*x164)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x166=new_r22*new_r22;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x167=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x168=(gconst13*x167);
CheckValue<IkReal> x169=IKPowWithIntegerCheck(((((-1.0)*x167))+((x166*x167))),-1);
if(!x169.valid){
continue;
}
CheckValue<IkReal> x170=IKPowWithIntegerCheck(((((-1.0)*x168))+((x166*x168))),-1);
if(!x170.valid){
continue;
}
if( IKabs(((x169.value)*((new_r11+(((-1.0)*new_r00*new_r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x170.value)*((((new_r00*x167))+(((-1.0)*new_r11*new_r22*x167)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x169.value)*((new_r11+(((-1.0)*new_r00*new_r22))))))+IKsqr(((x170.value)*((((new_r00*x167))+(((-1.0)*new_r11*new_r22*x167))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x169.value)*((new_r11+(((-1.0)*new_r00*new_r22))))), ((x170.value)*((((new_r00*x167))+(((-1.0)*new_r11*new_r22*x167))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x171=IKcos(j5);
IkReal x172=IKsin(j5);
IkReal x173=(gconst13*new_r10);
IkReal x174=(gconst13*new_r11);
IkReal x175=(gconst13*x171);
IkReal x176=((1.0)*x172);
IkReal x177=(new_r22*x172);
IkReal x178=x167;
IkReal x179=(new_r22*x178);
IkReal x180=((1.0)*x178);
evalcond[0]=(x171+((gconst13*new_r00))+(((-1.0)*new_r10*x180)));
evalcond[1]=(((new_r00*x178))+x173+x177);
evalcond[2]=(((new_r01*x178))+x174+((new_r22*x171)));
evalcond[3]=(((new_r00*x179))+x172+((new_r22*x173)));
evalcond[4]=(((new_r01*x179))+x171+((new_r22*x174)));
evalcond[5]=((((-1.0)*x176))+(((-1.0)*new_r11*x180))+((gconst13*new_r01)));
evalcond[6]=(x175+new_r00+((x177*x178)));
evalcond[7]=(((x172*x178))+((new_r22*x175))+new_r11);
evalcond[8]=(((x171*x179))+(((-1.0)*gconst13*x176))+new_r01);
evalcond[9]=((((-1.0)*x171*x180))+new_r10+((gconst13*x177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x181=gconst13*gconst13;
IkReal x182=((-1.0)*gconst13);
IkReal x183=((1.0)+(((-1.0)*x181)));
if((x183) < -0.00001)
continue;
IkReal x184=IKsqrt(x183);
IkReal x185=(new_r10*x184);
CheckValue<IkReal> x186=IKPowWithIntegerCheck(new_r22,-1);
if(!x186.valid){
continue;
}
CheckValue<IkReal> x187=IKPowWithIntegerCheck(x184,-1);
if(!x187.valid){
continue;
}
if( IKabs(((x186.value)*(x187.value)*((((new_r00*x181))+(((-1.0)*new_r00))+((x182*x185)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r00*x182))+x185)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x186.value)*(x187.value)*((((new_r00*x181))+(((-1.0)*new_r00))+((x182*x185))))))+IKsqr((((new_r00*x182))+x185))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x186.value)*(x187.value)*((((new_r00*x181))+(((-1.0)*new_r00))+((x182*x185))))), (((new_r00*x182))+x185));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x188=IKcos(j5);
IkReal x189=IKsin(j5);
IkReal x190=(gconst13*new_r10);
IkReal x191=(gconst13*new_r11);
IkReal x192=(gconst13*x188);
IkReal x193=((1.0)*x189);
IkReal x194=(new_r22*x189);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x195=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x196=(new_r22*x195);
IkReal x197=((1.0)*x195);
evalcond[0]=(x188+(((-1.0)*new_r10*x197))+((gconst13*new_r00)));
evalcond[1]=(((new_r00*x195))+x190+x194);
evalcond[2]=(((new_r01*x195))+x191+((new_r22*x188)));
evalcond[3]=(((new_r00*x196))+x189+((new_r22*x190)));
evalcond[4]=(((new_r01*x196))+x188+((new_r22*x191)));
evalcond[5]=((((-1.0)*x193))+(((-1.0)*new_r11*x197))+((gconst13*new_r01)));
evalcond[6]=(x192+((x194*x195))+new_r00);
evalcond[7]=(((x189*x195))+((new_r22*x192))+new_r11);
evalcond[8]=(((x188*x196))+new_r01+(((-1.0)*gconst13*x193)));
evalcond[9]=((((-1.0)*x188*x197))+new_r10+((gconst13*x194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x198=gconst13*gconst13;
IkReal x199=((-1.0)*gconst13);
IkReal x200=((1.0)+(((-1.0)*x198)));
if((x200) < -0.00001)
continue;
IkReal x201=IKsqrt(x200);
IkReal x202=(new_r10*x201);
CheckValue<IkReal> x203=IKPowWithIntegerCheck(x201,-1);
if(!x203.valid){
continue;
}
if( IKabs(((x203.value)*((((new_r22*x199*x202))+(((-1.0)*new_r11))+((new_r00*new_r22*x198)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r00*x199))+x202)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x203.value)*((((new_r22*x199*x202))+(((-1.0)*new_r11))+((new_r00*new_r22*x198))))))+IKsqr((((new_r00*x199))+x202))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x203.value)*((((new_r22*x199*x202))+(((-1.0)*new_r11))+((new_r00*new_r22*x198))))), (((new_r00*x199))+x202));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x204=IKcos(j5);
IkReal x205=IKsin(j5);
IkReal x206=(gconst13*new_r10);
IkReal x207=(gconst13*new_r11);
IkReal x208=(gconst13*x204);
IkReal x209=((1.0)*x205);
IkReal x210=(new_r22*x205);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x211=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x212=(new_r22*x211);
IkReal x213=((1.0)*x211);
evalcond[0]=((((-1.0)*new_r10*x213))+x204+((gconst13*new_r00)));
evalcond[1]=(x210+x206+((new_r00*x211)));
evalcond[2]=(x207+((new_r22*x204))+((new_r01*x211)));
evalcond[3]=(x205+((new_r22*x206))+((new_r00*x212)));
evalcond[4]=(x204+((new_r22*x207))+((new_r01*x212)));
evalcond[5]=((((-1.0)*new_r11*x213))+(((-1.0)*x209))+((gconst13*new_r01)));
evalcond[6]=(((x210*x211))+x208+new_r00);
evalcond[7]=(((x205*x211))+((new_r22*x208))+new_r11);
evalcond[8]=(((x204*x212))+(((-1.0)*gconst13*x209))+new_r01);
evalcond[9]=(((gconst13*x210))+(((-1.0)*x204*x213))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x214.valid){
continue;
}
if((((-1.0)*(x214.value))) < -0.00001)
continue;
IkReal gconst14=IKsqrt(((-1.0)*(x214.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst14)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
IkReal x215=IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))));
if( IKabs((((gconst14*new_r01))+((new_r11*x215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x215))+(((-1.0)*gconst14*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst14*new_r01))+((new_r11*x215))))+IKsqr(((((-1.0)*new_r10*x215))+(((-1.0)*gconst14*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst14*new_r01))+((new_r11*x215))), ((((-1.0)*new_r10*x215))+(((-1.0)*gconst14*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x216=IKsin(j5);
IkReal x217=IKcos(j5);
IkReal x218=(gconst14*new_r11);
IkReal x219=(gconst14*new_r10);
IkReal x220=(gconst14*x217);
IkReal x221=(gconst14*x216);
IkReal x222=x215;
IkReal x223=((1.0)*x222);
IkReal x224=(new_r22*x223);
evalcond[0]=(((gconst14*new_r00))+x217+((new_r10*x222)));
evalcond[1]=(((gconst14*new_r01))+(((-1.0)*x216))+((new_r11*x222)));
evalcond[2]=(((new_r22*x221))+((x217*x222))+new_r10);
evalcond[3]=(((new_r22*x216))+x219+(((-1.0)*new_r00*x223)));
evalcond[4]=(((new_r22*x217))+(((-1.0)*new_r01*x223))+x218);
evalcond[5]=(((new_r22*x219))+x216+(((-1.0)*new_r00*x224)));
evalcond[6]=(((new_r22*x218))+(((-1.0)*new_r01*x224))+x217);
evalcond[7]=((((-1.0)*x216*x224))+x220+new_r00);
evalcond[8]=((((-1.0)*x216*x223))+((new_r22*x220))+new_r11);
evalcond[9]=((((-1.0)*x217*x224))+new_r01+(((-1.0)*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x225=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x225.valid){
continue;
}
if((((-1.0)*(x225.value))) < -0.00001)
continue;
IkReal gconst14=IKsqrt(((-1.0)*(x225.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj3+(((-1.0)*gconst14)))))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))))));
cj3=gconst14;
if( (gconst14) < -1-IKFAST_SINCOS_THRESH || (gconst14) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst14)));
CheckValue<IkReal> x226=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x226.valid){
continue;
}
if((((-1.0)*(x226.value))) < -0.00001)
continue;
IkReal gconst14=IKsqrt(((-1.0)*(x226.value)));
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x227.valid){
continue;
}
j5eval[0]=((1.0)+(x227.value));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))))));
cj3=gconst14;
if( (gconst14) < -1-IKFAST_SINCOS_THRESH || (gconst14) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst14)));
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x228.valid){
continue;
}
if((((-1.0)*(x228.value))) < -0.00001)
continue;
IkReal gconst14=IKsqrt(((-1.0)*(x228.value)));
j5eval[0]=new_r22;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x229.valid){
continue;
}
j5eval[1]=((1.0)+(x229.value));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))))));
cj3=gconst14;
if( (gconst14) < -1-IKFAST_SINCOS_THRESH || (gconst14) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst14)));
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x230.valid){
continue;
}
if((((-1.0)*(x230.value))) < -0.00001)
continue;
IkReal gconst14=IKsqrt(((-1.0)*(x230.value)));
IkReal x231=new_r22*new_r22;
CheckValue<IkReal> x237=IKPowWithIntegerCheck(((-1.0)+x231),-1);
if(!x237.valid){
continue;
}
IkReal x232=x237.value;
if((((1.0)+x232)) < -0.00001)
continue;
IkReal x233=IKsqrt(((1.0)+x232));
if((((-1.0)*x232)) < -0.00001)
continue;
IkReal x234=IKsqrt(((-1.0)*x232));
IkReal x235=((1.0)*x233);
IkReal x236=(x231*x233);
j5eval[0]=((((-1.0)*x235))+x236);
j5eval[1]=(((x234*x236))+(((-1.0)*x234*x235)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x238=new_r22*new_r22;
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
IkReal x239=IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))));
IkReal x240=((-1.0)*x239);
IkReal x241=(x238*x239);
CheckValue<IkReal> x242=IKPowWithIntegerCheck((x241+(((-1.0)*x239))),-1);
if(!x242.valid){
continue;
}
CheckValue<IkReal> x243=IKPowWithIntegerCheck((((gconst14*x241))+((gconst14*x240))),-1);
if(!x243.valid){
continue;
}
if( IKabs(((x242.value)*((new_r11+(((-1.0)*new_r00*new_r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x243.value)*((((new_r00*x239))+((new_r11*new_r22*x240)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x242.value)*((new_r11+(((-1.0)*new_r00*new_r22))))))+IKsqr(((x243.value)*((((new_r00*x239))+((new_r11*new_r22*x240))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x242.value)*((new_r11+(((-1.0)*new_r00*new_r22))))), ((x243.value)*((((new_r00*x239))+((new_r11*new_r22*x240))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x244=IKcos(j5);
IkReal x245=IKsin(j5);
IkReal x246=(gconst14*new_r11);
IkReal x247=(gconst14*new_r10);
IkReal x248=(gconst14*x244);
IkReal x249=(gconst14*x245);
IkReal x250=(new_r22*x244);
IkReal x251=x239;
IkReal x252=(new_r00*x251);
IkReal x253=((1.0)*x251);
IkReal x254=(new_r01*x251);
IkReal x255=(x245*x251);
evalcond[0]=((((-1.0)*new_r10*x253))+((gconst14*new_r00))+x244);
evalcond[1]=(((new_r22*x245))+x252+x247);
evalcond[2]=(x254+x250+x246);
evalcond[3]=(((new_r22*x247))+x245+((new_r22*x252)));
evalcond[4]=(((new_r22*x246))+x244+((new_r22*x254)));
evalcond[5]=((((-1.0)*x245))+(((-1.0)*new_r11*x253))+((gconst14*new_r01)));
evalcond[6]=(x248+((new_r22*x255))+new_r00);
evalcond[7]=(((new_r22*x248))+x255+new_r11);
evalcond[8]=((((-1.0)*x249))+((x250*x251))+new_r01);
evalcond[9]=(((new_r22*x249))+(((-1.0)*x244*x253))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x256=gconst14*gconst14;
IkReal x257=((-1.0)*new_r00);
IkReal x258=((1.0)+(((-1.0)*x256)));
if((x258) < -0.00001)
continue;
IkReal x259=IKsqrt(x258);
IkReal x260=(new_r10*x259);
CheckValue<IkReal> x261=IKPowWithIntegerCheck(new_r22,-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(x259,-1);
if(!x262.valid){
continue;
}
if( IKabs(((x261.value)*(x262.value)*(((((-1.0)*gconst14*x260))+((new_r00*x256))+x257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x260+((gconst14*x257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x261.value)*(x262.value)*(((((-1.0)*gconst14*x260))+((new_r00*x256))+x257))))+IKsqr((x260+((gconst14*x257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x261.value)*(x262.value)*(((((-1.0)*gconst14*x260))+((new_r00*x256))+x257))), (x260+((gconst14*x257))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x263=IKcos(j5);
IkReal x264=IKsin(j5);
IkReal x265=(gconst14*new_r11);
IkReal x266=(gconst14*new_r10);
IkReal x267=(gconst14*x263);
IkReal x268=(gconst14*x264);
IkReal x269=(new_r22*x263);
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
IkReal x270=IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))));
IkReal x271=(new_r00*x270);
IkReal x272=((1.0)*x270);
IkReal x273=(new_r01*x270);
IkReal x274=(x264*x270);
evalcond[0]=(((gconst14*new_r00))+x263+(((-1.0)*new_r10*x272)));
evalcond[1]=(((new_r22*x264))+x266+x271);
evalcond[2]=(x265+x269+x273);
evalcond[3]=(((new_r22*x266))+((new_r22*x271))+x264);
evalcond[4]=(((new_r22*x265))+((new_r22*x273))+x263);
evalcond[5]=((((-1.0)*x264))+((gconst14*new_r01))+(((-1.0)*new_r11*x272)));
evalcond[6]=(((new_r22*x274))+x267+new_r00);
evalcond[7]=(((new_r22*x267))+x274+new_r11);
evalcond[8]=((((-1.0)*x268))+new_r01+((x269*x270)));
evalcond[9]=((((-1.0)*x263*x272))+((new_r22*x268))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x275=gconst14*gconst14;
IkReal x276=((-1.0)*gconst14);
IkReal x277=((1.0)+(((-1.0)*x275)));
if((x277) < -0.00001)
continue;
IkReal x278=IKsqrt(x277);
IkReal x279=(new_r10*x278);
CheckValue<IkReal> x280=IKPowWithIntegerCheck(x278,-1);
if(!x280.valid){
continue;
}
if( IKabs(((x280.value)*((((new_r00*new_r22*x275))+((new_r22*x276*x279))+(((-1.0)*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x279+((new_r00*x276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x280.value)*((((new_r00*new_r22*x275))+((new_r22*x276*x279))+(((-1.0)*new_r11))))))+IKsqr((x279+((new_r00*x276))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x280.value)*((((new_r00*new_r22*x275))+((new_r22*x276*x279))+(((-1.0)*new_r11))))), (x279+((new_r00*x276))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x281=IKcos(j5);
IkReal x282=IKsin(j5);
IkReal x283=(gconst14*new_r11);
IkReal x284=(gconst14*new_r10);
IkReal x285=(gconst14*x281);
IkReal x286=(gconst14*x282);
IkReal x287=(new_r22*x281);
if((((1.0)+(((-1.0)*(gconst14*gconst14))))) < -0.00001)
continue;
IkReal x288=IKsqrt(((1.0)+(((-1.0)*(gconst14*gconst14)))));
IkReal x289=(new_r00*x288);
IkReal x290=((1.0)*x288);
IkReal x291=(new_r01*x288);
IkReal x292=(x282*x288);
evalcond[0]=((((-1.0)*new_r10*x290))+((gconst14*new_r00))+x281);
evalcond[1]=(x289+x284+((new_r22*x282)));
evalcond[2]=(x291+x287+x283);
evalcond[3]=(x282+((new_r22*x289))+((new_r22*x284)));
evalcond[4]=(((new_r22*x291))+x281+((new_r22*x283)));
evalcond[5]=((((-1.0)*new_r11*x290))+((gconst14*new_r01))+(((-1.0)*x282)));
evalcond[6]=(((new_r22*x292))+x285+new_r00);
evalcond[7]=(x292+new_r11+((new_r22*x285)));
evalcond[8]=((((-1.0)*x286))+new_r01+((x287*x288)));
evalcond[9]=(new_r10+((new_r22*x286))+(((-1.0)*x281*x290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x293=((1.0)*new_r10);
IkReal x294=(cj3*new_r00);
CheckValue<IkReal> x295=IKPowWithIntegerCheck(cj3,-1);
if(!x295.valid){
continue;
}
CheckValue<IkReal> x296=IKPowWithIntegerCheck(new_r22,-1);
if(!x296.valid){
continue;
}
if( IKabs(((x295.value)*(x296.value)*(((((-1.0)*x293*(cj3*cj3)))+((sj3*x294)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x294))+(((-1.0)*sj3*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x295.value)*(x296.value)*(((((-1.0)*x293*(cj3*cj3)))+((sj3*x294))))))+IKsqr(((((-1.0)*x294))+(((-1.0)*sj3*x293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x295.value)*(x296.value)*(((((-1.0)*x293*(cj3*cj3)))+((sj3*x294))))), ((((-1.0)*x294))+(((-1.0)*sj3*x293))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x297=IKsin(j5);
IkReal x298=IKcos(j5);
IkReal x299=((1.0)*sj3);
IkReal x300=(cj3*new_r10);
IkReal x301=(cj3*new_r11);
IkReal x302=(cj3*x298);
IkReal x303=(new_r22*x297);
IkReal x304=(new_r22*x298);
IkReal x305=((1.0)*x297);
evalcond[0]=(((new_r10*sj3))+x298+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x305)));
evalcond[2]=(((cj3*x303))+new_r10+((sj3*x298)));
evalcond[3]=(x303+x300+(((-1.0)*new_r00*x299)));
evalcond[4]=((((-1.0)*new_r01*x299))+x304+x301);
evalcond[5]=(((new_r22*x300))+x297+(((-1.0)*new_r00*new_r22*x299)));
evalcond[6]=((((-1.0)*new_r01*new_r22*x299))+((new_r22*x301))+x298);
evalcond[7]=(x302+(((-1.0)*x299*x303))+new_r00);
evalcond[8]=((((-1.0)*x297*x299))+((new_r22*x302))+new_r11);
evalcond[9]=((((-1.0)*cj3*x305))+(((-1.0)*x299*x304))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x306=((1.0)*cj3);
CheckValue<IkReal> x307=IKPowWithIntegerCheck(new_r22,-1);
if(!x307.valid){
continue;
}
if( IKabs(((x307.value)*((((new_r00*sj3))+(((-1.0)*new_r10*x306)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*sj3))+(((-1.0)*new_r00*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x307.value)*((((new_r00*sj3))+(((-1.0)*new_r10*x306))))))+IKsqr(((((-1.0)*new_r10*sj3))+(((-1.0)*new_r00*x306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x307.value)*((((new_r00*sj3))+(((-1.0)*new_r10*x306))))), ((((-1.0)*new_r10*sj3))+(((-1.0)*new_r00*x306))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x308=IKsin(j5);
IkReal x309=IKcos(j5);
IkReal x310=((1.0)*sj3);
IkReal x311=(cj3*new_r10);
IkReal x312=(cj3*new_r11);
IkReal x313=(cj3*x309);
IkReal x314=(new_r22*x308);
IkReal x315=(new_r22*x309);
IkReal x316=((1.0)*x308);
evalcond[0]=(((new_r10*sj3))+x309+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+(((-1.0)*x316))+((cj3*new_r01)));
evalcond[2]=(((sj3*x309))+((cj3*x314))+new_r10);
evalcond[3]=((((-1.0)*new_r00*x310))+x314+x311);
evalcond[4]=(x315+x312+(((-1.0)*new_r01*x310)));
evalcond[5]=((((-1.0)*new_r00*new_r22*x310))+x308+((new_r22*x311)));
evalcond[6]=(x309+(((-1.0)*new_r01*new_r22*x310))+((new_r22*x312)));
evalcond[7]=((((-1.0)*x310*x314))+x313+new_r00);
evalcond[8]=((((-1.0)*x308*x310))+new_r11+((new_r22*x313)));
evalcond[9]=((((-1.0)*x310*x315))+new_r01+(((-1.0)*cj3*x316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x317=cj3*cj3;
IkReal x318=((1.0)*cj3*new_r22);
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal((((new_r11*sj3))+(((-1.0)*new_r10*x318)))),IkReal(((((-1.0)*new_r11*x318))+(((-1.0)*new_r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
CheckValue<IkReal> x320=IKPowWithIntegerCheck(IKsign(((1.0)+((x317*(new_r22*new_r22)))+(((-1.0)*x317)))),-1);
if(!x320.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x319.value)+(((1.5707963267949)*(x320.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x321=IKsin(j5);
IkReal x322=IKcos(j5);
IkReal x323=((1.0)*sj3);
IkReal x324=(cj3*new_r10);
IkReal x325=(cj3*new_r11);
IkReal x326=(cj3*x322);
IkReal x327=(new_r22*x321);
IkReal x328=(new_r22*x322);
IkReal x329=((1.0)*x321);
evalcond[0]=(((new_r10*sj3))+x322+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+(((-1.0)*x329))+((cj3*new_r01)));
evalcond[2]=(((sj3*x322))+new_r10+((cj3*x327)));
evalcond[3]=(x324+x327+(((-1.0)*new_r00*x323)));
evalcond[4]=(x325+x328+(((-1.0)*new_r01*x323)));
evalcond[5]=(((new_r22*x324))+x321+(((-1.0)*new_r00*new_r22*x323)));
evalcond[6]=(((new_r22*x325))+x322+(((-1.0)*new_r01*new_r22*x323)));
evalcond[7]=((((-1.0)*x323*x327))+x326+new_r00);
evalcond[8]=(((new_r22*x326))+(((-1.0)*x321*x323))+new_r11);
evalcond[9]=((((-1.0)*cj3*x329))+(((-1.0)*x323*x328))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x331=IKPowWithIntegerCheck(sj4,-1);
if(!x331.valid){
continue;
}
IkReal x330=x331.value;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(new_r02,-1);
if(!x332.valid){
continue;
}
if( IKabs((x330*(x332.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x330)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x330*(x332.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x330))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x330*(x332.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x330));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x333=IKsin(j3);
IkReal x334=IKcos(j3);
IkReal x335=(sj4*x334);
IkReal x336=((1.0)*x333);
IkReal x337=(new_r12*x334);
evalcond[0]=(x335+new_r12);
evalcond[1]=((((-1.0)*sj4*x336))+new_r02);
evalcond[2]=(((new_r12*x333))+((new_r02*x334)));
evalcond[3]=(sj4+x337+(((-1.0)*new_r02*x336)));
evalcond[4]=(((new_r22*sj4))+((cj4*new_r02*x333))+(((-1.0)*cj4*x337)));
evalcond[5]=(((cj4*new_r20))+((new_r10*x335))+(((-1.0)*new_r00*sj4*x336)));
evalcond[6]=(((cj4*new_r21))+((new_r11*x335))+(((-1.0)*new_r01*sj4*x336)));
evalcond[7]=((1.0)+((new_r12*x335))+((cj4*new_r22))+(((-1.0)*new_r02*sj4*x336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x338=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x338))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x338))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x338))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x338))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x339=IKsin(j5);
IkReal x340=IKcos(j5);
IkReal x341=((1.0)*sj3);
IkReal x342=(sj3*x340);
IkReal x343=((1.0)*x339);
IkReal x344=((1.0)*x340);
IkReal x345=(cj3*x343);
evalcond[0]=(((new_r10*sj3))+x340+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x343)));
evalcond[2]=(((sj3*x339))+new_r00+((cj3*x340)));
evalcond[3]=(x342+new_r01+(((-1.0)*x345)));
evalcond[4]=(x342+new_r10+(((-1.0)*x345)));
evalcond[5]=((((-1.0)*new_r00*x341))+((cj3*new_r10))+(((-1.0)*x343)));
evalcond[6]=(((cj3*new_r11))+(((-1.0)*new_r01*x341))+(((-1.0)*x344)));
evalcond[7]=((((-1.0)*cj3*x344))+new_r11+(((-1.0)*x339*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x346=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r10*x346))+((new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x346))+(((-1.0)*new_r10*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x346))+((new_r00*sj3))))+IKsqr(((((-1.0)*new_r00*x346))+(((-1.0)*new_r10*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r10*x346))+((new_r00*sj3))), ((((-1.0)*new_r00*x346))+(((-1.0)*new_r10*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x347=IKcos(j5);
IkReal x348=IKsin(j5);
IkReal x349=((1.0)*sj3);
IkReal x350=(cj3*x347);
IkReal x351=((1.0)*x348);
IkReal x352=(x348*x349);
evalcond[0]=(((new_r10*sj3))+x347+((cj3*new_r00)));
evalcond[1]=(x348+(((-1.0)*new_r00*x349))+((cj3*new_r10)));
evalcond[2]=(x347+((cj3*new_r11))+(((-1.0)*new_r01*x349)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x351))+((cj3*new_r01)));
evalcond[4]=(((sj3*x347))+new_r10+((cj3*x348)));
evalcond[5]=((((-1.0)*x352))+x350+new_r00);
evalcond[6]=((((-1.0)*x352))+x350+new_r11);
evalcond[7]=((((-1.0)*cj3*x351))+(((-1.0)*x347*x349))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x353=IKcos(j5);
IkReal x354=IKsin(j5);
evalcond[0]=(x353+new_r10);
evalcond[1]=(new_r20+((new_r02*x354)));
evalcond[2]=(new_r21+((new_r02*x353)));
evalcond[3]=((((-1.0)*x354))+new_r11);
evalcond[4]=(((cj4*x354))+new_r00);
evalcond[5]=(((cj4*x353))+new_r01);
evalcond[6]=(((new_r20*sj4))+((cj4*new_r00))+x354);
evalcond[7]=(((cj4*new_r01))+x353+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x355=IKcos(j5);
IkReal x356=IKsin(j5);
IkReal x357=((1.0)*cj4);
IkReal x358=((1.0)*x355);
IkReal x359=((1.0)*x356);
evalcond[0]=(x355+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*new_r02*x359))+new_r20);
evalcond[2]=((((-1.0)*new_r02*x358))+new_r21);
evalcond[3]=((((-1.0)*x356*x357))+new_r00);
evalcond[4]=(new_r01+(((-1.0)*x355*x357)));
evalcond[5]=((((-1.0)*x359))+(((-1.0)*new_r11)));
evalcond[6]=(((new_r20*sj4))+x356+(((-1.0)*new_r00*x357)));
evalcond[7]=(x355+(((-1.0)*new_r01*x357))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x361=IKPowWithIntegerCheck(sj4,-1);
if(!x361.valid){
continue;
}
IkReal x360=x361.value;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(cj3,-1);
if(!x362.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x360)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x360*(x362.value)*((((cj4*new_r20*sj3))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x360))+IKsqr((x360*(x362.value)*((((cj4*new_r20*sj3))+(((-1.0)*new_r00*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20*x360), (x360*(x362.value)*((((cj4*new_r20*sj3))+(((-1.0)*new_r00*sj4))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x363=IKcos(j5);
IkReal x364=IKsin(j5);
IkReal x365=((1.0)*cj4);
IkReal x366=(cj4*sj3);
IkReal x367=(cj3*new_r10);
IkReal x368=(cj3*new_r11);
IkReal x369=((1.0)*sj3);
IkReal x370=(cj3*x364);
IkReal x371=(cj3*x363);
evalcond[0]=(((sj4*x364))+new_r20);
evalcond[1]=(((sj4*x363))+new_r21);
evalcond[2]=(((new_r10*sj3))+x363+((cj3*new_r00)));
evalcond[3]=((((-1.0)*x364))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[4]=(((x364*x366))+x371+new_r00);
evalcond[5]=((((-1.0)*x370))+new_r01+((x363*x366)));
evalcond[6]=(((sj3*x363))+new_r10+(((-1.0)*x365*x370)));
evalcond[7]=((((-1.0)*new_r00*x369))+x367+(((-1.0)*x364*x365)));
evalcond[8]=((((-1.0)*x363*x365))+x368+(((-1.0)*new_r01*x369)));
evalcond[9]=((((-1.0)*x364*x369))+new_r11+(((-1.0)*x365*x371)));
evalcond[10]=(((new_r20*sj4))+((new_r00*x366))+x364+(((-1.0)*x365*x367)));
evalcond[11]=(x363+((new_r01*x366))+((new_r21*sj4))+(((-1.0)*x365*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(sj4,-1);
if(!x372.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x372.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r10*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x372.value)))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r10*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20*(x372.value)), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r10*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x373=IKcos(j5);
IkReal x374=IKsin(j5);
IkReal x375=((1.0)*cj4);
IkReal x376=(cj4*sj3);
IkReal x377=(cj3*new_r10);
IkReal x378=(cj3*new_r11);
IkReal x379=((1.0)*sj3);
IkReal x380=(cj3*x374);
IkReal x381=(cj3*x373);
evalcond[0]=(((sj4*x374))+new_r20);
evalcond[1]=(((sj4*x373))+new_r21);
evalcond[2]=(((new_r10*sj3))+x373+((cj3*new_r00)));
evalcond[3]=((((-1.0)*x374))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[4]=(x381+new_r00+((x374*x376)));
evalcond[5]=((((-1.0)*x380))+new_r01+((x373*x376)));
evalcond[6]=((((-1.0)*x375*x380))+((sj3*x373))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x379))+x377+(((-1.0)*x374*x375)));
evalcond[8]=(x378+(((-1.0)*x373*x375))+(((-1.0)*new_r01*x379)));
evalcond[9]=((((-1.0)*x375*x381))+(((-1.0)*x374*x379))+new_r11);
evalcond[10]=(((new_r20*sj4))+x374+((new_r00*x376))+(((-1.0)*x375*x377)));
evalcond[11]=(((new_r01*x376))+x373+((new_r21*sj4))+(((-1.0)*x375*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x382=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x382.valid){
continue;
}
CheckValue<IkReal> x383 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x383.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x382.value)))+(x383.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x384=IKcos(j5);
IkReal x385=IKsin(j5);
IkReal x386=((1.0)*cj4);
IkReal x387=(cj4*sj3);
IkReal x388=(cj3*new_r10);
IkReal x389=(cj3*new_r11);
IkReal x390=((1.0)*sj3);
IkReal x391=(cj3*x385);
IkReal x392=(cj3*x384);
evalcond[0]=(((sj4*x385))+new_r20);
evalcond[1]=(((sj4*x384))+new_r21);
evalcond[2]=(((new_r10*sj3))+x384+((cj3*new_r00)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x385))+((cj3*new_r01)));
evalcond[4]=(x392+((x385*x387))+new_r00);
evalcond[5]=((((-1.0)*x391))+((x384*x387))+new_r01);
evalcond[6]=((((-1.0)*x386*x391))+new_r10+((sj3*x384)));
evalcond[7]=(x388+(((-1.0)*new_r00*x390))+(((-1.0)*x385*x386)));
evalcond[8]=((((-1.0)*new_r01*x390))+(((-1.0)*x384*x386))+x389);
evalcond[9]=((((-1.0)*x386*x392))+(((-1.0)*x385*x390))+new_r11);
evalcond[10]=(((new_r20*sj4))+((new_r00*x387))+x385+(((-1.0)*x386*x388)));
evalcond[11]=(((new_r01*x387))+x384+(((-1.0)*x386*x389))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x394.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x393.value)))+(x394.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj4*(IKsin(j5))))+new_r20);
evalcond[1]=(((sj4*(IKcos(j5))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r10;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x395=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x395))+(((-1.0)*new_r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r00*x395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x395))+(((-1.0)*new_r00*sj5))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r00*x395))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*new_r01*x395))+(((-1.0)*new_r00*sj5))), (((new_r01*sj5))+(((-1.0)*new_r00*x395))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x396=IKsin(j3);
IkReal x397=IKcos(j3);
IkReal x398=((1.0)*sj5);
IkReal x399=((1.0)*cj5);
IkReal x400=(cj5*x396);
IkReal x401=((1.0)*x396);
IkReal x402=(x397*x398);
evalcond[0]=(cj5+((new_r00*x397))+((new_r10*x396)));
evalcond[1]=(((cj5*x397))+((sj5*x396))+new_r00);
evalcond[2]=(x400+new_r01+(((-1.0)*x402)));
evalcond[3]=(x400+new_r10+(((-1.0)*x402)));
evalcond[4]=(((new_r11*x396))+(((-1.0)*x398))+((new_r01*x397)));
evalcond[5]=((((-1.0)*x397*x399))+(((-1.0)*x396*x398))+new_r11);
evalcond[6]=((((-1.0)*x398))+(((-1.0)*new_r00*x401))+((new_r10*x397)));
evalcond[7]=(((new_r11*x397))+(((-1.0)*x399))+(((-1.0)*new_r01*x401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x403=((1.0)*new_r10);
IkReal x404=((new_r10*new_r10)+(new_r00*new_r00));
j3eval[0]=x404;
j3eval[1]=((IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*sj5*x403)))))+(IKabs((((new_r00*sj5))+(((-1.0)*cj5*x403))))));
j3eval[2]=IKsign(x404);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x405=((1.0)*cj5);
IkReal x406=(((new_r10*new_r11))+((new_r00*new_r01)));
j3eval[0]=x406;
j3eval[1]=((IKabs((((cj5*new_r00))+(((-1.0)*new_r11*x405)))))+(IKabs(((((-1.0)*new_r10*x405))+(((-1.0)*new_r01*x405))))));
j3eval[2]=IKsign(x406);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x407=((1.0)*new_r10);
IkReal x408=((((-1.0)*sj5*x407))+((cj5*new_r00)));
j3eval[0]=x408;
j3eval[1]=((IKabs((((cj5*sj5))+(((-1.0)*new_r00*x407)))))+(IKabs(((((-1.0)*(cj5*cj5)))+(new_r10*new_r10)))));
j3eval[2]=IKsign(x408);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x411 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x411)==0){
continue;
}
IkReal x409=pow(x411,-0.5);
IkReal x410=((-1.0)*x409);
CheckValue<IkReal> x412 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x412.valid){
continue;
}
IkReal gconst7=((-1.0)*(x412.value));
IkReal gconst8=(new_r00*x410);
IkReal gconst9=(new_r10*x410);
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x413.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
CheckValue<IkReal> x417 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x417.valid){
continue;
}
IkReal x414=((-1.0)*(x417.value));
IkReal x415=x409;
IkReal x416=((-1.0)*x415);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst8;
cj5=gconst9;
j5=x414;
IkReal gconst7=x414;
IkReal gconst8=(new_r00*x416);
IkReal gconst9=(new_r10*x416);
IkReal x418=((new_r10*new_r10)+(new_r00*new_r00));
j3eval[0]=x418;
j3eval[1]=IKsign(x418);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
CheckValue<IkReal> x422 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x422.valid){
continue;
}
IkReal x419=((-1.0)*(x422.value));
IkReal x420=x409;
IkReal x421=((-1.0)*x420);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst8;
cj5=gconst9;
j5=x419;
IkReal gconst7=x419;
IkReal gconst8=(new_r00*x421);
IkReal gconst9=(new_r10*x421);
IkReal x423=new_r10*new_r10;
IkReal x424=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x425=x409;
IkReal x426=(new_r10*x425);
j3eval[0]=x424;
j3eval[1]=IKsign(x424);
j3eval[2]=((IKabs((((x423*x425))+((new_r01*x426)))))+(IKabs(((((-1.0)*new_r00*x426))+((new_r11*x426))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
IkReal x427=((-1.0)*(x430.value));
IkReal x428=x409;
IkReal x429=((-1.0)*x428);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst8;
cj5=gconst9;
j5=x427;
IkReal gconst7=x427;
IkReal gconst8=(new_r00*x429);
IkReal gconst9=(new_r10*x429);
IkReal x431=new_r10*new_r10;
IkReal x432=new_r00*new_r00;
CheckValue<IkReal> x439=IKPowWithIntegerCheck((x431+x432),-1);
if(!x439.valid){
continue;
}
IkReal x433=x439.value;
IkReal x434=(x431*x433);
CheckValue<IkReal> x440=IKPowWithIntegerCheck(((((-1.0)*x431))+(((-1.0)*x432))),-1);
if(!x440.valid){
continue;
}
IkReal x435=x440.value;
IkReal x436=((1.0)*x435);
IkReal x437=(new_r00*x436);
IkReal x438=(new_r10*x436);
j3eval[0]=((IKabs(((((-1.0)*new_r10*x437*(new_r00*new_r00)))+(((-1.0)*x437*(new_r10*new_r10*new_r10)))+(((-1.0)*new_r10*x437)))))+(IKabs(((((-1.0)*x434))+((x433*(x432*x432)))+((x432*x434))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst9*gconst9)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst8*gconst9))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign((((gconst9*new_r10))+((gconst8*new_r00)))),-1);
if(!x442.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x441.value)+(((1.5707963267949)*(x442.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x443=IKcos(j3);
IkReal x444=IKsin(j3);
IkReal x445=((1.0)*gconst8);
IkReal x446=(gconst9*x443);
IkReal x447=(gconst9*x444);
IkReal x448=((1.0)*x444);
IkReal x449=(x444*x445);
evalcond[0]=(((new_r00*x443))+gconst9+((new_r10*x444)));
evalcond[1]=(((gconst8*x443))+x447+new_r10);
evalcond[2]=((((-1.0)*x449))+x446+new_r00);
evalcond[3]=((((-1.0)*new_r00*x448))+gconst8+((new_r10*x443)));
evalcond[4]=((((-1.0)*new_r01*x448))+gconst9+((new_r11*x443)));
evalcond[5]=((((-1.0)*x449))+x446+new_r11);
evalcond[6]=((((-1.0)*x445))+((new_r01*x443))+((new_r11*x444)));
evalcond[7]=((((-1.0)*x447))+(((-1.0)*x443*x445))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x450=((1.0)*gconst9);
CheckValue<IkReal> x451 = IKatan2WithCheck(IkReal((((gconst9*new_r00))+(((-1.0)*new_r11*x450)))),IkReal(((((-1.0)*new_r10*x450))+(((-1.0)*new_r01*x450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x451.valid){
continue;
}
CheckValue<IkReal> x452=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x452.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x451.value)+(((1.5707963267949)*(x452.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x453=IKcos(j3);
IkReal x454=IKsin(j3);
IkReal x455=((1.0)*gconst8);
IkReal x456=(gconst9*x453);
IkReal x457=(gconst9*x454);
IkReal x458=((1.0)*x454);
IkReal x459=(x454*x455);
evalcond[0]=(((new_r10*x454))+((new_r00*x453))+gconst9);
evalcond[1]=(x457+new_r10+((gconst8*x453)));
evalcond[2]=((((-1.0)*x459))+x456+new_r00);
evalcond[3]=(((new_r10*x453))+gconst8+(((-1.0)*new_r00*x458)));
evalcond[4]=(((new_r11*x453))+gconst9+(((-1.0)*new_r01*x458)));
evalcond[5]=((((-1.0)*x459))+x456+new_r11);
evalcond[6]=(((new_r11*x454))+((new_r01*x453))+(((-1.0)*x455)));
evalcond[7]=((((-1.0)*x457))+(((-1.0)*x453*x455))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x460=((1.0)*new_r10);
CheckValue<IkReal> x461=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal((((gconst8*new_r00))+(((-1.0)*gconst9*x460)))),IkReal(((((-1.0)*gconst9*new_r00))+(((-1.0)*gconst8*x460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x461.value)))+(x462.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x463=IKcos(j3);
IkReal x464=IKsin(j3);
IkReal x465=((1.0)*gconst8);
IkReal x466=(gconst9*x463);
IkReal x467=(gconst9*x464);
IkReal x468=((1.0)*x464);
IkReal x469=(x464*x465);
evalcond[0]=(((new_r10*x464))+((new_r00*x463))+gconst9);
evalcond[1]=(x467+new_r10+((gconst8*x463)));
evalcond[2]=((((-1.0)*x469))+x466+new_r00);
evalcond[3]=(((new_r10*x463))+gconst8+(((-1.0)*new_r00*x468)));
evalcond[4]=(((new_r11*x463))+gconst9+(((-1.0)*new_r01*x468)));
evalcond[5]=((((-1.0)*x469))+x466+new_r11);
evalcond[6]=(((new_r11*x464))+((new_r01*x463))+(((-1.0)*x465)));
evalcond[7]=((((-1.0)*x463*x465))+(((-1.0)*x467))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x472 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x472)==0){
continue;
}
IkReal x470=pow(x472,-0.5);
IkReal x471=((1.0)*x470);
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
IkReal gconst10=((3.14159265358979)+(((-1.0)*(x473.value))));
IkReal gconst11=(new_r00*x471);
IkReal gconst12=(new_r10*x471);
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x474.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
IkReal x475=((1.0)*(x478.value));
IkReal x476=x470;
IkReal x477=((1.0)*x476);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst11;
cj5=gconst12;
j5=((3.14159265)+(((-1.0)*x475)));
IkReal gconst10=((3.14159265358979)+(((-1.0)*x475)));
IkReal gconst11=(new_r00*x477);
IkReal gconst12=(new_r10*x477);
IkReal x479=((new_r10*new_r10)+(new_r00*new_r00));
j3eval[0]=x479;
j3eval[1]=IKsign(x479);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
CheckValue<IkReal> x483 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x483.valid){
continue;
}
IkReal x480=((1.0)*(x483.value));
IkReal x481=x470;
IkReal x482=((1.0)*x481);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst11;
cj5=gconst12;
j5=((3.14159265)+(((-1.0)*x480)));
IkReal gconst10=((3.14159265358979)+(((-1.0)*x480)));
IkReal gconst11=(new_r00*x482);
IkReal gconst12=(new_r10*x482);
IkReal x484=new_r10*new_r10;
IkReal x485=(new_r10*new_r11);
IkReal x486=(((new_r00*new_r01))+x485);
IkReal x487=x470;
IkReal x488=((1.0)*x487);
j3eval[0]=x486;
j3eval[1]=IKsign(x486);
j3eval[2]=((IKabs((((new_r00*new_r10*x487))+(((-1.0)*x485*x488)))))+(IKabs(((((-1.0)*x484*x488))+(((-1.0)*new_r01*new_r10*x488))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x492 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x492.valid){
continue;
}
IkReal x489=((1.0)*(x492.value));
IkReal x490=x470;
IkReal x491=((1.0)*x490);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst11;
cj5=gconst12;
j5=((3.14159265)+(((-1.0)*x489)));
IkReal gconst10=((3.14159265358979)+(((-1.0)*x489)));
IkReal gconst11=(new_r00*x491);
IkReal gconst12=(new_r10*x491);
IkReal x493=new_r10*new_r10;
IkReal x494=new_r00*new_r00;
CheckValue<IkReal> x501=IKPowWithIntegerCheck((x493+x494),-1);
if(!x501.valid){
continue;
}
IkReal x495=x501.value;
IkReal x496=(x493*x495);
CheckValue<IkReal> x502=IKPowWithIntegerCheck(((((-1.0)*x494))+(((-1.0)*x493))),-1);
if(!x502.valid){
continue;
}
IkReal x497=x502.value;
IkReal x498=((1.0)*x497);
IkReal x499=(new_r00*x498);
IkReal x500=(new_r10*x498);
j3eval[0]=((IKabs(((((-1.0)*new_r10*x499))+(((-1.0)*x499*(new_r10*new_r10*new_r10)))+(((-1.0)*new_r10*x499*(new_r00*new_r00))))))+(IKabs((((x494*x496))+(((-1.0)*x496))+((x495*(x494*x494)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x503=IKPowWithIntegerCheck(IKsign((((gconst11*new_r00))+((gconst12*new_r10)))),-1);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst12*gconst12)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst11*gconst12))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x503.value)))+(x504.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x505=IKsin(j3);
IkReal x506=IKcos(j3);
IkReal x507=(gconst12*x506);
IkReal x508=(gconst11*x506);
IkReal x509=(gconst12*x505);
IkReal x510=((1.0)*x505);
IkReal x511=(gconst11*x510);
evalcond[0]=(gconst12+((new_r10*x505))+((new_r00*x506)));
evalcond[1]=(x508+x509+new_r10);
evalcond[2]=(x507+new_r00+(((-1.0)*x511)));
evalcond[3]=(gconst11+((new_r10*x506))+(((-1.0)*new_r00*x510)));
evalcond[4]=(gconst12+((new_r11*x506))+(((-1.0)*new_r01*x510)));
evalcond[5]=(x507+new_r11+(((-1.0)*x511)));
evalcond[6]=(((new_r11*x505))+((new_r01*x506))+(((-1.0)*gconst11)));
evalcond[7]=(new_r01+(((-1.0)*x508))+(((-1.0)*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x512=((1.0)*gconst12);
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal((((gconst12*new_r00))+(((-1.0)*new_r11*x512)))),IkReal(((((-1.0)*new_r10*x512))+(((-1.0)*new_r01*x512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x514.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x513.value)+(((1.5707963267949)*(x514.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x515=IKsin(j3);
IkReal x516=IKcos(j3);
IkReal x517=(gconst12*x516);
IkReal x518=(gconst11*x516);
IkReal x519=(gconst12*x515);
IkReal x520=((1.0)*x515);
IkReal x521=(gconst11*x520);
evalcond[0]=(((new_r00*x516))+((new_r10*x515))+gconst12);
evalcond[1]=(x519+x518+new_r10);
evalcond[2]=((((-1.0)*x521))+x517+new_r00);
evalcond[3]=(((new_r10*x516))+gconst11+(((-1.0)*new_r00*x520)));
evalcond[4]=(((new_r11*x516))+gconst12+(((-1.0)*new_r01*x520)));
evalcond[5]=((((-1.0)*x521))+x517+new_r11);
evalcond[6]=(((new_r01*x516))+((new_r11*x515))+(((-1.0)*gconst11)));
evalcond[7]=((((-1.0)*x519))+(((-1.0)*x518))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x522=((1.0)*new_r10);
CheckValue<IkReal> x523=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x523.valid){
continue;
}
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal((((gconst11*new_r00))+(((-1.0)*gconst12*x522)))),IkReal(((((-1.0)*gconst12*new_r00))+(((-1.0)*gconst11*x522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x523.value)))+(x524.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x525=IKsin(j3);
IkReal x526=IKcos(j3);
IkReal x527=(gconst12*x526);
IkReal x528=(gconst11*x526);
IkReal x529=(gconst12*x525);
IkReal x530=((1.0)*x525);
IkReal x531=(gconst11*x530);
evalcond[0]=(gconst12+((new_r10*x525))+((new_r00*x526)));
evalcond[1]=(x528+x529+new_r10);
evalcond[2]=((((-1.0)*x531))+x527+new_r00);
evalcond[3]=(gconst11+(((-1.0)*new_r00*x530))+((new_r10*x526)));
evalcond[4]=(gconst12+((new_r11*x526))+(((-1.0)*new_r01*x530)));
evalcond[5]=((((-1.0)*x531))+x527+new_r11);
evalcond[6]=(((new_r01*x526))+((new_r11*x525))+(((-1.0)*gconst11)));
evalcond[7]=((((-1.0)*x528))+(((-1.0)*x529))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x532=IKcos(j3);
IkReal x533=IKsin(j3);
IkReal x534=((1.0)*x533);
evalcond[0]=(x532+new_r10);
evalcond[1]=((((-1.0)*x534))+new_r00);
evalcond[2]=((((-1.0)*x532))+new_r01);
evalcond[3]=((((-1.0)*x534))+new_r11);
evalcond[4]=(((new_r10*x533))+((new_r00*x532)));
evalcond[5]=((-1.0)+((new_r01*x532))+((new_r11*x533)));
evalcond[6]=(((new_r11*x532))+(((-1.0)*new_r01*x534)));
evalcond[7]=((1.0)+(((-1.0)*new_r00*x534))+((new_r10*x532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x535=IKsin(j3);
IkReal x536=IKcos(j3);
IkReal x537=((1.0)*x535);
evalcond[0]=(x535+new_r00);
evalcond[1]=(x536+new_r01);
evalcond[2]=(x535+new_r11);
evalcond[3]=((((-1.0)*x536))+new_r10);
evalcond[4]=(((new_r10*x535))+((new_r00*x536)));
evalcond[5]=((1.0)+((new_r01*x536))+((new_r11*x535)));
evalcond[6]=(((new_r11*x536))+(((-1.0)*new_r01*x537)));
evalcond[7]=((-1.0)+(((-1.0)*new_r00*x537))+((new_r10*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r10=0;
new_r00=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x539 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
IkReal x538=x539.value;
j3array[0]=((-1.0)*x538);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x538)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j3))))+(((-1.0)*new_r01*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
IkReal x540=x541.value;
j3array[0]=((-1.0)*x540);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x540)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j3))))+(((-1.0)*new_r01*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x542=((1.0)*new_r10);
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign((((cj5*new_r00))+(((-1.0)*sj5*x542)))),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x542))+((cj5*sj5)))),IkReal(((((-1.0)*(cj5*cj5)))+(new_r10*new_r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x543.value)))+(x544.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x545=IKcos(j3);
IkReal x546=IKsin(j3);
IkReal x547=((1.0)*sj5);
IkReal x548=(cj5*x545);
IkReal x549=(cj5*x546);
IkReal x550=(sj5*x545);
IkReal x551=((1.0)*x546);
IkReal x552=(x546*x547);
evalcond[0]=(((new_r00*x545))+cj5+((new_r10*x546)));
evalcond[1]=(x550+x549+new_r10);
evalcond[2]=((((-1.0)*x552))+x548+new_r00);
evalcond[3]=(sj5+((new_r10*x545))+(((-1.0)*new_r00*x551)));
evalcond[4]=(cj5+(((-1.0)*new_r01*x551))+((new_r11*x545)));
evalcond[5]=((((-1.0)*x552))+x548+new_r11);
evalcond[6]=(((new_r11*x546))+(((-1.0)*x547))+((new_r01*x545)));
evalcond[7]=((((-1.0)*x545*x547))+(((-1.0)*x549))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x553=((1.0)*cj5);
CheckValue<IkReal> x554 = IKatan2WithCheck(IkReal((((cj5*new_r00))+(((-1.0)*new_r11*x553)))),IkReal(((((-1.0)*new_r10*x553))+(((-1.0)*new_r01*x553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x555.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x554.value)+(((1.5707963267949)*(x555.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x556=IKcos(j3);
IkReal x557=IKsin(j3);
IkReal x558=((1.0)*sj5);
IkReal x559=(cj5*x556);
IkReal x560=(cj5*x557);
IkReal x561=(sj5*x556);
IkReal x562=((1.0)*x557);
IkReal x563=(x557*x558);
evalcond[0]=(cj5+((new_r10*x557))+((new_r00*x556)));
evalcond[1]=(x560+x561+new_r10);
evalcond[2]=(x559+new_r00+(((-1.0)*x563)));
evalcond[3]=((((-1.0)*new_r00*x562))+sj5+((new_r10*x556)));
evalcond[4]=(cj5+((new_r11*x556))+(((-1.0)*new_r01*x562)));
evalcond[5]=(x559+new_r11+(((-1.0)*x563)));
evalcond[6]=(((new_r11*x557))+(((-1.0)*x558))+((new_r01*x556)));
evalcond[7]=((((-1.0)*x556*x558))+(((-1.0)*x560))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x564=((1.0)*new_r10);
CheckValue<IkReal> x565=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal((((new_r00*sj5))+(((-1.0)*cj5*x564)))),IkReal(((((-1.0)*cj5*new_r00))+(((-1.0)*sj5*x564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x565.value)))+(x566.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x567=IKcos(j3);
IkReal x568=IKsin(j3);
IkReal x569=((1.0)*sj5);
IkReal x570=(cj5*x567);
IkReal x571=(cj5*x568);
IkReal x572=(sj5*x567);
IkReal x573=((1.0)*x568);
IkReal x574=(x568*x569);
evalcond[0]=(cj5+((new_r00*x567))+((new_r10*x568)));
evalcond[1]=(x571+x572+new_r10);
evalcond[2]=((((-1.0)*x574))+x570+new_r00);
evalcond[3]=(sj5+(((-1.0)*new_r00*x573))+((new_r10*x567)));
evalcond[4]=(cj5+((new_r11*x567))+(((-1.0)*new_r01*x573)));
evalcond[5]=((((-1.0)*x574))+x570+new_r11);
evalcond[6]=(((new_r01*x567))+((new_r11*x568))+(((-1.0)*x569)));
evalcond[7]=((((-1.0)*x571))+(((-1.0)*x567*x569))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x576 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x576.valid){
continue;
}
IkReal x575=x576.value;
j3array[0]=((-1.0)*x575);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x575)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x577=IKcos(j3);
IkReal x578=IKsin(j3);
IkReal x579=(new_r11*x577);
IkReal x580=((1.0)*x578);
evalcond[0]=(((new_r00*x577))+((new_r10*x578)));
evalcond[1]=(((new_r11*x578))+((new_r01*x577)));
evalcond[2]=(((new_r10*x577))+(((-1.0)*new_r00*x580)));
evalcond[3]=((((-1.0)*new_r01*x580))+x579);
evalcond[4]=((((-1.0)*new_r01*new_r22*x580))+((new_r22*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
IkReal x581=x582.value;
j3array[0]=((-1.0)*x581);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x581)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x583=IKcos(j3);
IkReal x584=IKsin(j3);
IkReal x585=(new_r11*x583);
IkReal x586=(new_r10*x583);
IkReal x587=((1.0)*x584);
evalcond[0]=(((new_r00*x583))+((new_r10*x584)));
evalcond[1]=(x586+(((-1.0)*new_r00*x587)));
evalcond[2]=((((-1.0)*new_r01*x587))+x585);
evalcond[3]=(((new_r22*x586))+(((-1.0)*new_r00*new_r22*x587)));
evalcond[4]=(((new_r22*x585))+(((-1.0)*new_r01*new_r22*x587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
IkReal x588=x589.value;
j3array[0]=((-1.0)*x588);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x588)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x590=IKcos(j3);
IkReal x591=IKsin(j3);
IkReal x592=(new_r11*x590);
IkReal x593=(new_r10*x590);
IkReal x594=((1.0)*x591);
evalcond[0]=(((new_r11*x591))+((new_r01*x590)));
evalcond[1]=((((-1.0)*new_r00*x594))+x593);
evalcond[2]=((((-1.0)*new_r01*x594))+x592);
evalcond[3]=((((-1.0)*new_r00*new_r22*x594))+((new_r22*x593)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x594))+((new_r22*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x596=IKPowWithIntegerCheck(sj4,-1);
if(!x596.valid){
continue;
}
IkReal x595=x596.value;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(new_r10,-1);
if(!x597.valid){
continue;
}
if( IKabs((x595*(x597.value)*(((((-1.0)*cj5*sj4))+((new_r00*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x595)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x595*(x597.value)*(((((-1.0)*cj5*sj4))+((new_r00*new_r12))))))+IKsqr(((-1.0)*new_r12*x595))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x595*(x597.value)*(((((-1.0)*cj5*sj4))+((new_r00*new_r12))))), ((-1.0)*new_r12*x595));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x598=IKsin(j3);
IkReal x599=IKcos(j3);
IkReal x600=((1.0)*cj4);
IkReal x601=((1.0)*sj5);
IkReal x602=(new_r11*x599);
IkReal x603=((1.0)*x598);
IkReal x604=(sj4*x599);
IkReal x605=(cj5*x598);
IkReal x606=(cj4*x598);
IkReal x607=(x599*x600);
evalcond[0]=(x604+new_r12);
evalcond[1]=((((-1.0)*sj4*x603))+new_r02);
evalcond[2]=(((new_r12*x598))+((new_r02*x599)));
evalcond[3]=(cj5+((new_r10*x598))+((new_r00*x599)));
evalcond[4]=(((new_r12*x599))+sj4+(((-1.0)*new_r02*x603)));
evalcond[5]=(((sj5*x606))+new_r00+((cj5*x599)));
evalcond[6]=(((new_r11*x598))+((new_r01*x599))+(((-1.0)*x601)));
evalcond[7]=((((-1.0)*x599*x601))+new_r01+((cj4*x605)));
evalcond[8]=((((-1.0)*sj5*x607))+x605+new_r10);
evalcond[9]=((((-1.0)*x598*x601))+(((-1.0)*cj5*x607))+new_r11);
evalcond[10]=((((-1.0)*sj5*x600))+((new_r10*x599))+(((-1.0)*new_r00*x603)));
evalcond[11]=(x602+(((-1.0)*cj5*x600))+(((-1.0)*new_r01*x603)));
evalcond[12]=((((-1.0)*new_r12*x607))+((new_r22*sj4))+((new_r02*x606)));
evalcond[13]=((((-1.0)*new_r00*sj4*x603))+((cj4*new_r20))+((new_r10*x604)));
evalcond[14]=(((cj4*new_r21))+((sj4*x602))+(((-1.0)*new_r01*sj4*x603)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*sj4*x603))+((cj4*new_r22))+((new_r12*x604)));
evalcond[16]=(sj5+((new_r20*sj4))+(((-1.0)*new_r10*x607))+((new_r00*x606)));
evalcond[17]=(cj5+(((-1.0)*x600*x602))+((new_r21*sj4))+((new_r01*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x609.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x608.value)))+(x609.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x610=IKsin(j3);
IkReal x611=IKcos(j3);
IkReal x612=((1.0)*cj4);
IkReal x613=((1.0)*sj5);
IkReal x614=(new_r11*x611);
IkReal x615=((1.0)*x610);
IkReal x616=(sj4*x611);
IkReal x617=(cj5*x610);
IkReal x618=(cj4*x610);
IkReal x619=(x611*x612);
evalcond[0]=(x616+new_r12);
evalcond[1]=((((-1.0)*sj4*x615))+new_r02);
evalcond[2]=(((new_r12*x610))+((new_r02*x611)));
evalcond[3]=(cj5+((new_r10*x610))+((new_r00*x611)));
evalcond[4]=(sj4+(((-1.0)*new_r02*x615))+((new_r12*x611)));
evalcond[5]=(new_r00+((cj5*x611))+((sj5*x618)));
evalcond[6]=(((new_r11*x610))+(((-1.0)*x613))+((new_r01*x611)));
evalcond[7]=((((-1.0)*x611*x613))+new_r01+((cj4*x617)));
evalcond[8]=((((-1.0)*sj5*x619))+x617+new_r10);
evalcond[9]=((((-1.0)*x610*x613))+(((-1.0)*cj5*x619))+new_r11);
evalcond[10]=((((-1.0)*sj5*x612))+((new_r10*x611))+(((-1.0)*new_r00*x615)));
evalcond[11]=((((-1.0)*cj5*x612))+x614+(((-1.0)*new_r01*x615)));
evalcond[12]=((((-1.0)*new_r12*x619))+((new_r22*sj4))+((new_r02*x618)));
evalcond[13]=((((-1.0)*new_r00*sj4*x615))+((cj4*new_r20))+((new_r10*x616)));
evalcond[14]=((((-1.0)*new_r01*sj4*x615))+((sj4*x614))+((cj4*new_r21)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*sj4*x615))+((cj4*new_r22))+((new_r12*x616)));
evalcond[16]=(sj5+((new_r20*sj4))+(((-1.0)*new_r10*x619))+((new_r00*x618)));
evalcond[17]=((((-1.0)*x612*x614))+cj5+((new_r21*sj4))+((new_r01*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x620=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x620.valid){
continue;
}
CheckValue<IkReal> x621 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x620.value)))+(x621.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x622=IKsin(j3);
IkReal x623=IKcos(j3);
IkReal x624=(sj4*x623);
IkReal x625=((1.0)*x622);
IkReal x626=(new_r12*x623);
evalcond[0]=(x624+new_r12);
evalcond[1]=(new_r02+(((-1.0)*sj4*x625)));
evalcond[2]=(((new_r02*x623))+((new_r12*x622)));
evalcond[3]=(sj4+(((-1.0)*new_r02*x625))+x626);
evalcond[4]=(((new_r22*sj4))+((cj4*new_r02*x622))+(((-1.0)*cj4*x626)));
evalcond[5]=((((-1.0)*new_r00*sj4*x625))+((cj4*new_r20))+((new_r10*x624)));
evalcond[6]=((((-1.0)*new_r01*sj4*x625))+((cj4*new_r21))+((new_r11*x624)));
evalcond[7]=((1.0)+((cj4*new_r22))+(((-1.0)*new_r02*sj4*x625))+((new_r12*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x627=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x627))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x627))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x627))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x627))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x627))+((cj3*new_r01))), ((((-1.0)*new_r01*x627))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x628=IKsin(j5);
IkReal x629=IKcos(j5);
IkReal x630=((1.0)*sj3);
IkReal x631=(sj3*x629);
IkReal x632=((1.0)*x628);
IkReal x633=((1.0)*x629);
IkReal x634=(cj3*x632);
evalcond[0]=(((new_r10*sj3))+x629+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+(((-1.0)*x632))+((cj3*new_r01)));
evalcond[2]=(((cj3*x629))+((sj3*x628))+new_r00);
evalcond[3]=((((-1.0)*x634))+x631+new_r01);
evalcond[4]=((((-1.0)*x634))+x631+new_r10);
evalcond[5]=((((-1.0)*new_r00*x630))+(((-1.0)*x632))+((cj3*new_r10)));
evalcond[6]=((((-1.0)*new_r01*x630))+(((-1.0)*x633))+((cj3*new_r11)));
evalcond[7]=((((-1.0)*x628*x630))+new_r11+(((-1.0)*cj3*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x635=((1.0)*cj3);
if( IKabs((((new_r00*sj3))+(((-1.0)*new_r10*x635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x635))+(((-1.0)*new_r10*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj3))+(((-1.0)*new_r10*x635))))+IKsqr(((((-1.0)*new_r00*x635))+(((-1.0)*new_r10*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((new_r00*sj3))+(((-1.0)*new_r10*x635))), ((((-1.0)*new_r00*x635))+(((-1.0)*new_r10*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x636=IKcos(j5);
IkReal x637=IKsin(j5);
IkReal x638=((1.0)*sj3);
IkReal x639=(cj3*x636);
IkReal x640=((1.0)*x637);
IkReal x641=(x637*x638);
evalcond[0]=(((new_r10*sj3))+x636+((cj3*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x638))+x637+((cj3*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x638))+x636+((cj3*new_r11)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x640))+((cj3*new_r01)));
evalcond[4]=(((cj3*x637))+((sj3*x636))+new_r10);
evalcond[5]=((((-1.0)*x641))+x639+new_r00);
evalcond[6]=((((-1.0)*x641))+x639+new_r11);
evalcond[7]=((((-1.0)*cj3*x640))+(((-1.0)*x636*x638))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x642=IKcos(j5);
IkReal x643=IKsin(j5);
evalcond[0]=(x642+new_r10);
evalcond[1]=(new_r20+((new_r02*x643)));
evalcond[2]=(new_r21+((new_r02*x642)));
evalcond[3]=((((-1.0)*x643))+new_r11);
evalcond[4]=(((cj4*x643))+new_r00);
evalcond[5]=(((cj4*x642))+new_r01);
evalcond[6]=(((new_r20*sj4))+((cj4*new_r00))+x643);
evalcond[7]=(((cj4*new_r01))+x642+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x644=IKcos(j5);
IkReal x645=IKsin(j5);
IkReal x646=((1.0)*cj4);
IkReal x647=((1.0)*x644);
IkReal x648=((1.0)*x645);
evalcond[0]=(x644+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*new_r02*x648))+new_r20);
evalcond[2]=((((-1.0)*new_r02*x647))+new_r21);
evalcond[3]=((((-1.0)*x645*x646))+new_r00);
evalcond[4]=((((-1.0)*x644*x646))+new_r01);
evalcond[5]=((((-1.0)*x648))+(((-1.0)*new_r11)));
evalcond[6]=(((new_r20*sj4))+(((-1.0)*new_r00*x646))+x645);
evalcond[7]=((((-1.0)*new_r01*x646))+x644+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x650=IKPowWithIntegerCheck(sj4,-1);
if(!x650.valid){
continue;
}
IkReal x649=x650.value;
CheckValue<IkReal> x651=IKPowWithIntegerCheck(cj3,-1);
if(!x651.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x649)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x649*(x651.value)*((((cj4*new_r20*sj3))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x649))+IKsqr((x649*(x651.value)*((((cj4*new_r20*sj3))+(((-1.0)*new_r00*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20*x649), (x649*(x651.value)*((((cj4*new_r20*sj3))+(((-1.0)*new_r00*sj4))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x652=IKcos(j5);
IkReal x653=IKsin(j5);
IkReal x654=((1.0)*cj4);
IkReal x655=(cj4*sj3);
IkReal x656=(cj3*new_r10);
IkReal x657=(cj3*new_r11);
IkReal x658=((1.0)*sj3);
IkReal x659=(cj3*x653);
IkReal x660=(cj3*x652);
evalcond[0]=(((sj4*x653))+new_r20);
evalcond[1]=(((sj4*x652))+new_r21);
evalcond[2]=(((new_r10*sj3))+x652+((cj3*new_r00)));
evalcond[3]=((((-1.0)*x653))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[4]=(((x653*x655))+x660+new_r00);
evalcond[5]=((((-1.0)*x659))+((x652*x655))+new_r01);
evalcond[6]=(((sj3*x652))+new_r10+(((-1.0)*x654*x659)));
evalcond[7]=((((-1.0)*new_r00*x658))+x656+(((-1.0)*x653*x654)));
evalcond[8]=((((-1.0)*new_r01*x658))+x657+(((-1.0)*x652*x654)));
evalcond[9]=((((-1.0)*x654*x660))+new_r11+(((-1.0)*x653*x658)));
evalcond[10]=(((new_r20*sj4))+x653+((new_r00*x655))+(((-1.0)*x654*x656)));
evalcond[11]=(((new_r01*x655))+x652+((new_r21*sj4))+(((-1.0)*x654*x657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x661=IKPowWithIntegerCheck(sj4,-1);
if(!x661.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x661.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r10*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x661.value)))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r10*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20*(x661.value)), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r10*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x662=IKcos(j5);
IkReal x663=IKsin(j5);
IkReal x664=((1.0)*cj4);
IkReal x665=(cj4*sj3);
IkReal x666=(cj3*new_r10);
IkReal x667=(cj3*new_r11);
IkReal x668=((1.0)*sj3);
IkReal x669=(cj3*x663);
IkReal x670=(cj3*x662);
evalcond[0]=(((sj4*x663))+new_r20);
evalcond[1]=(((sj4*x662))+new_r21);
evalcond[2]=(((new_r10*sj3))+x662+((cj3*new_r00)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x663))+((cj3*new_r01)));
evalcond[4]=(((x663*x665))+x670+new_r00);
evalcond[5]=(((x662*x665))+(((-1.0)*x669))+new_r01);
evalcond[6]=(((sj3*x662))+new_r10+(((-1.0)*x664*x669)));
evalcond[7]=((((-1.0)*x663*x664))+x666+(((-1.0)*new_r00*x668)));
evalcond[8]=((((-1.0)*x662*x664))+x667+(((-1.0)*new_r01*x668)));
evalcond[9]=((((-1.0)*x663*x668))+(((-1.0)*x664*x670))+new_r11);
evalcond[10]=(((new_r20*sj4))+x663+((new_r00*x665))+(((-1.0)*x664*x666)));
evalcond[11]=(x662+((new_r21*sj4))+(((-1.0)*x664*x667))+((new_r01*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x671=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x671.value)))+(x672.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x673=IKcos(j5);
IkReal x674=IKsin(j5);
IkReal x675=((1.0)*cj4);
IkReal x676=(cj4*sj3);
IkReal x677=(cj3*new_r10);
IkReal x678=(cj3*new_r11);
IkReal x679=((1.0)*sj3);
IkReal x680=(cj3*x674);
IkReal x681=(cj3*x673);
evalcond[0]=(((sj4*x674))+new_r20);
evalcond[1]=(((sj4*x673))+new_r21);
evalcond[2]=(((new_r10*sj3))+x673+((cj3*new_r00)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x674))+((cj3*new_r01)));
evalcond[4]=(((x674*x676))+x681+new_r00);
evalcond[5]=(((x673*x676))+new_r01+(((-1.0)*x680)));
evalcond[6]=(((sj3*x673))+(((-1.0)*x675*x680))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x679))+x677+(((-1.0)*x674*x675)));
evalcond[8]=((((-1.0)*new_r01*x679))+x678+(((-1.0)*x673*x675)));
evalcond[9]=((((-1.0)*x675*x681))+(((-1.0)*x674*x679))+new_r11);
evalcond[10]=(((new_r00*x676))+(((-1.0)*x675*x677))+((new_r20*sj4))+x674);
evalcond[11]=(((new_r01*x676))+(((-1.0)*x675*x678))+x673+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - proarm (530a4f7bdf5c81c903050295fa25d0e7)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
